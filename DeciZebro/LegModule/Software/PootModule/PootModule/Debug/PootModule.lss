
PootModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000269e  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ed9  00000000  00000000  00002a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d4e  00000000  00000000  00004923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00006674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00022863  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002af  00000000  00000000  00029027  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000292d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007453  00000000  00000000  00029366  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
   2:	00 00       	nop
   4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
   6:	00 00       	nop
   8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
   a:	00 00       	nop
   c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
   e:	00 00       	nop
  10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
  12:	00 00       	nop
  14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
  16:	00 00       	nop
  18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
  1e:	00 00       	nop
  20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
  22:	00 00       	nop
  24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
  26:	00 00       	nop
  28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
  2e:	00 00       	nop
  30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
  32:	00 00       	nop
  34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
  36:	00 00       	nop
  38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
  3e:	00 00       	nop
  40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
  42:	00 00       	nop
  44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
  46:	00 00       	nop
  48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
  4e:	00 00       	nop
  50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
  52:	00 00       	nop
  54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
  56:	00 00       	nop
  58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
  5e:	00 00       	nop
  60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
  62:	00 00       	nop
  64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
  66:	00 00       	nop
  68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
  6e:	00 00       	nop
  70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
  72:	00 00       	nop
  74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
  76:	00 00       	nop
  78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
  7e:	00 00       	nop
  80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
  82:	00 00       	nop
  84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
  86:	00 00       	nop
  88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
  8e:	00 00       	nop
  90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
  92:	00 00       	nop
  94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
  96:	00 00       	nop
  98:	79 c0       	rjmp	.+242    	; 0x18c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	77 c0       	rjmp	.+238    	; 0x18c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	75 c0       	rjmp	.+234    	; 0x18c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	73 c0       	rjmp	.+230    	; 0x18c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	71 c0       	rjmp	.+226    	; 0x18c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	6f c0       	rjmp	.+222    	; 0x18c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	6d c0       	rjmp	.+218    	; 0x18c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	6b c0       	rjmp	.+214    	; 0x18c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	69 c0       	rjmp	.+210    	; 0x18c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	67 c0       	rjmp	.+206    	; 0x18c <__bad_interrupt>
  be:	00 00       	nop
  c0:	65 c0       	rjmp	.+202    	; 0x18c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	63 c0       	rjmp	.+198    	; 0x18c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	61 c0       	rjmp	.+194    	; 0x18c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5f c0       	rjmp	.+190    	; 0x18c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	5d c0       	rjmp	.+186    	; 0x18c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	5b c0       	rjmp	.+182    	; 0x18c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	59 c0       	rjmp	.+178    	; 0x18c <__bad_interrupt>
  da:	00 00       	nop
  dc:	57 c0       	rjmp	.+174    	; 0x18c <__bad_interrupt>
  de:	00 00       	nop
  e0:	55 c0       	rjmp	.+170    	; 0x18c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	53 c0       	rjmp	.+166    	; 0x18c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	51 c0       	rjmp	.+162    	; 0x18c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	4f c0       	rjmp	.+158    	; 0x18c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	4d c0       	rjmp	.+154    	; 0x18c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	4b c0       	rjmp	.+150    	; 0x18c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	49 c0       	rjmp	.+146    	; 0x18c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	47 c0       	rjmp	.+142    	; 0x18c <__bad_interrupt>
  fe:	00 00       	nop
 100:	45 c0       	rjmp	.+138    	; 0x18c <__bad_interrupt>
 102:	00 00       	nop
 104:	43 c0       	rjmp	.+134    	; 0x18c <__bad_interrupt>
 106:	00 00       	nop
 108:	41 c0       	rjmp	.+130    	; 0x18c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	3f c0       	rjmp	.+126    	; 0x18c <__bad_interrupt>
 10e:	00 00       	nop
 110:	3d c0       	rjmp	.+122    	; 0x18c <__bad_interrupt>
 112:	00 00       	nop
 114:	3b c0       	rjmp	.+118    	; 0x18c <__bad_interrupt>
 116:	00 00       	nop
 118:	39 c0       	rjmp	.+114    	; 0x18c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	37 c0       	rjmp	.+110    	; 0x18c <__bad_interrupt>
 11e:	00 00       	nop
 120:	35 c0       	rjmp	.+106    	; 0x18c <__bad_interrupt>
 122:	00 00       	nop
 124:	33 c0       	rjmp	.+102    	; 0x18c <__bad_interrupt>
 126:	00 00       	nop
 128:	31 c0       	rjmp	.+98     	; 0x18c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	2f c0       	rjmp	.+94     	; 0x18c <__bad_interrupt>
 12e:	00 00       	nop
 130:	2d c0       	rjmp	.+90     	; 0x18c <__bad_interrupt>
 132:	00 00       	nop
 134:	2b c0       	rjmp	.+86     	; 0x18c <__bad_interrupt>
 136:	00 00       	nop
 138:	29 c0       	rjmp	.+82     	; 0x18c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	27 c0       	rjmp	.+78     	; 0x18c <__bad_interrupt>
 13e:	00 00       	nop
 140:	25 c0       	rjmp	.+74     	; 0x18c <__bad_interrupt>
 142:	00 00       	nop
 144:	23 c0       	rjmp	.+70     	; 0x18c <__bad_interrupt>
 146:	00 00       	nop
 148:	21 c0       	rjmp	.+66     	; 0x18c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	1f c0       	rjmp	.+62     	; 0x18c <__bad_interrupt>
 14e:	00 00       	nop
 150:	1d c0       	rjmp	.+58     	; 0x18c <__bad_interrupt>
 152:	00 00       	nop
 154:	1b c0       	rjmp	.+54     	; 0x18c <__bad_interrupt>
 156:	00 00       	nop
 158:	19 c0       	rjmp	.+50     	; 0x18c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	17 c0       	rjmp	.+46     	; 0x18c <__bad_interrupt>
 15e:	00 00       	nop
 160:	15 c0       	rjmp	.+42     	; 0x18c <__bad_interrupt>
 162:	00 00       	nop
 164:	13 c0       	rjmp	.+38     	; 0x18c <__bad_interrupt>
 166:	00 00       	nop
 168:	11 c0       	rjmp	.+34     	; 0x18c <__bad_interrupt>
	...

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_clear_bss>:
 178:	20 e2       	ldi	r18, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
 180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
 182:	a0 30       	cpi	r26, 0x00	; 0
 184:	b2 07       	cpc	r27, r18
 186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
 188:	3f d0       	rcall	.+126    	; 0x208 <main>
 18a:	44 c0       	rjmp	.+136    	; 0x214 <_exit>

0000018c <__bad_interrupt>:
 18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 194:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 198:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 19c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 1a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 1a4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 1a8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 1ac:	08 95       	ret

000001ae <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 1ae:	08 95       	ret

000001b0 <leds_init>:

/** 
 * Toggle LED 1
 */
void leds_toggle_LD1(void){
	LEDS_LD1_PORT.OUTTGL |= LEDS_LD1_PIN;
 1b0:	a0 e8       	ldi	r26, 0x80	; 128
 1b2:	b6 e0       	ldi	r27, 0x06	; 6
 1b4:	8c 91       	ld	r24, X
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	8c 93       	st	X, r24
 1ba:	e0 ee       	ldi	r30, 0xE0	; 224
 1bc:	f7 e0       	ldi	r31, 0x07	; 7
 1be:	80 81       	ld	r24, Z
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24
 1c4:	16 96       	adiw	r26, 0x06	; 6
 1c6:	8c 91       	ld	r24, X
 1c8:	16 97       	sbiw	r26, 0x06	; 6
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	16 96       	adiw	r26, 0x06	; 6
 1ce:	8c 93       	st	X, r24
 1d0:	86 81       	ldd	r24, Z+6	; 0x06
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	86 83       	std	Z+6, r24	; 0x06
 1d6:	08 95       	ret

000001d8 <leds_blink_LD1_blocking>:
 * Use only during debugging
 */
void leds_blink_LD1_blocking(void){
	while (1)
	{
		LEDS_LD1_PORT.OUTTGL |= LEDS_LD1_PIN;
 1d8:	e0 e8       	ldi	r30, 0x80	; 128
 1da:	f6 e0       	ldi	r31, 0x06	; 6
 1dc:	5b e0       	ldi	r21, 0x0B	; 11
 1de:	4b e8       	ldi	r20, 0x8B	; 139
 1e0:	32 e0       	ldi	r19, 0x02	; 2
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	87 81       	ldd	r24, Z+7	; 0x07
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	87 83       	std	Z+7, r24	; 0x07
 1ea:	85 2f       	mov	r24, r21
 1ec:	94 2f       	mov	r25, r20
 1ee:	a3 2f       	mov	r26, r19
 1f0:	b2 2f       	mov	r27, r18
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	a1 09       	sbc	r26, r1
 1f6:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <leds_blink_LD1_blocking+0x1a>
 1fa:	f4 cf       	rjmp	.-24     	; 0x1e4 <leds_blink_LD1_blocking+0xc>

000001fc <leds_set_LD2>:

/** 
 * Turn LED 2 on
 */
void leds_set_LD2(void){
	LEDS_LD2_PORT.OUTSET |= LEDS_LD2_PIN;
 1fc:	e0 ee       	ldi	r30, 0xE0	; 224
 1fe:	f7 e0       	ldi	r31, 0x07	; 7
 200:	85 81       	ldd	r24, Z+5	; 0x05
 202:	81 60       	ori	r24, 0x01	; 1
 204:	85 83       	std	Z+5, r24	; 0x05
 206:	08 95       	ret

00000208 <main>:

int main (void)
{
	/*some debugging code*/
		/* Initialise system clock */
		sysclk_init();
 208:	c2 df       	rcall	.-124    	; 0x18e <sysclk_init>
		/* Initalise delay functions */
		delay_init(sysclk_get_cpu_hz());
	
	/* Initialise board parameters*/
	board_init();
 20a:	d1 df       	rcall	.-94     	; 0x1ae <board_init>
	
	/* Insert application code here, after the board has been initialized. */
		/* Initialise leds */
		leds_init();
 20c:	d1 df       	rcall	.-94     	; 0x1b0 <leds_init>
		leds_set_LD2();
 20e:	f6 df       	rcall	.-20     	; 0x1fc <leds_set_LD2>
		leds_blink_LD1_blocking();
 210:	e3 df       	rcall	.-58     	; 0x1d8 <leds_blink_LD1_blocking>
	
	
	while (1){
		
	}
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0xa>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
