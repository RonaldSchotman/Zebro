
PootModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000311  00802000  00802000  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a48  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020c7  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cce  00000000  00000000  0000500f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00007ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00023520  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000396  00000000  00000000  0002b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0002b796  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007dec  00000000  00000000  0002b876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
   2:	00 00       	nop
   4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
   6:	00 00       	nop
   8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
   a:	00 00       	nop
   c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
   e:	00 00       	nop
  10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
  12:	00 00       	nop
  14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
  16:	00 00       	nop
  18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
  1e:	00 00       	nop
  20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
  22:	00 00       	nop
  24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
  26:	00 00       	nop
  28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
  2e:	00 00       	nop
  30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
  32:	00 00       	nop
  34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
  36:	00 00       	nop
  38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
  3e:	00 00       	nop
  40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
  42:	00 00       	nop
  44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
  46:	00 00       	nop
  48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
  4e:	00 00       	nop
  50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
  52:	00 00       	nop
  54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
  56:	00 00       	nop
  58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
  5e:	00 00       	nop
  60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
  62:	00 00       	nop
  64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
  66:	00 00       	nop
  68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
  6e:	00 00       	nop
  70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
  72:	00 00       	nop
  74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
  76:	00 00       	nop
  78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
  7e:	00 00       	nop
  80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
  82:	00 00       	nop
  84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
  86:	00 00       	nop
  88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
  8e:	00 00       	nop
  90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
  92:	00 00       	nop
  94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
  96:	00 00       	nop
  98:	79 c0       	rjmp	.+242    	; 0x18c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	77 c0       	rjmp	.+238    	; 0x18c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	75 c0       	rjmp	.+234    	; 0x18c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	73 c0       	rjmp	.+230    	; 0x18c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	71 c0       	rjmp	.+226    	; 0x18c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	6f c0       	rjmp	.+222    	; 0x18c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	6d c0       	rjmp	.+218    	; 0x18c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	6b c0       	rjmp	.+214    	; 0x18c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	69 c0       	rjmp	.+210    	; 0x18c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	67 c0       	rjmp	.+206    	; 0x18c <__bad_interrupt>
  be:	00 00       	nop
  c0:	65 c0       	rjmp	.+202    	; 0x18c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	63 c0       	rjmp	.+198    	; 0x18c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	61 c0       	rjmp	.+194    	; 0x18c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5f c0       	rjmp	.+190    	; 0x18c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	5d c0       	rjmp	.+186    	; 0x18c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	5b c0       	rjmp	.+182    	; 0x18c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	59 c0       	rjmp	.+178    	; 0x18c <__bad_interrupt>
  da:	00 00       	nop
  dc:	57 c0       	rjmp	.+174    	; 0x18c <__bad_interrupt>
  de:	00 00       	nop
  e0:	55 c0       	rjmp	.+170    	; 0x18c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	53 c0       	rjmp	.+166    	; 0x18c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	51 c0       	rjmp	.+162    	; 0x18c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	4f c0       	rjmp	.+158    	; 0x18c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	4d c0       	rjmp	.+154    	; 0x18c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	4b c0       	rjmp	.+150    	; 0x18c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	49 c0       	rjmp	.+146    	; 0x18c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	47 c0       	rjmp	.+142    	; 0x18c <__bad_interrupt>
  fe:	00 00       	nop
 100:	45 c0       	rjmp	.+138    	; 0x18c <__bad_interrupt>
 102:	00 00       	nop
 104:	43 c0       	rjmp	.+134    	; 0x18c <__bad_interrupt>
 106:	00 00       	nop
 108:	41 c0       	rjmp	.+130    	; 0x18c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	3f c0       	rjmp	.+126    	; 0x18c <__bad_interrupt>
 10e:	00 00       	nop
 110:	3d c0       	rjmp	.+122    	; 0x18c <__bad_interrupt>
 112:	00 00       	nop
 114:	3b c0       	rjmp	.+118    	; 0x18c <__bad_interrupt>
 116:	00 00       	nop
 118:	39 c0       	rjmp	.+114    	; 0x18c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	37 c0       	rjmp	.+110    	; 0x18c <__bad_interrupt>
 11e:	00 00       	nop
 120:	35 c0       	rjmp	.+106    	; 0x18c <__bad_interrupt>
 122:	00 00       	nop
 124:	33 c0       	rjmp	.+102    	; 0x18c <__bad_interrupt>
 126:	00 00       	nop
 128:	31 c0       	rjmp	.+98     	; 0x18c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	2f c0       	rjmp	.+94     	; 0x18c <__bad_interrupt>
 12e:	00 00       	nop
 130:	2d c0       	rjmp	.+90     	; 0x18c <__bad_interrupt>
 132:	00 00       	nop
 134:	2b c0       	rjmp	.+86     	; 0x18c <__bad_interrupt>
 136:	00 00       	nop
 138:	29 c0       	rjmp	.+82     	; 0x18c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	27 c0       	rjmp	.+78     	; 0x18c <__bad_interrupt>
 13e:	00 00       	nop
 140:	25 c0       	rjmp	.+74     	; 0x18c <__bad_interrupt>
 142:	00 00       	nop
 144:	23 c0       	rjmp	.+70     	; 0x18c <__bad_interrupt>
 146:	00 00       	nop
 148:	21 c0       	rjmp	.+66     	; 0x18c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	1f c0       	rjmp	.+62     	; 0x18c <__bad_interrupt>
 14e:	00 00       	nop
 150:	1d c0       	rjmp	.+58     	; 0x18c <__bad_interrupt>
 152:	00 00       	nop
 154:	1b c0       	rjmp	.+54     	; 0x18c <__bad_interrupt>
 156:	00 00       	nop
 158:	19 c0       	rjmp	.+50     	; 0x18c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	17 c0       	rjmp	.+46     	; 0x18c <__bad_interrupt>
 15e:	00 00       	nop
 160:	15 c0       	rjmp	.+42     	; 0x18c <__bad_interrupt>
 162:	00 00       	nop
 164:	13 c0       	rjmp	.+38     	; 0x18c <__bad_interrupt>
 166:	00 00       	nop
 168:	11 c0       	rjmp	.+34     	; 0x18c <__bad_interrupt>
	...

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_clear_bss>:
 178:	23 e2       	ldi	r18, 0x23	; 35
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
 180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
 182:	a1 31       	cpi	r26, 0x11	; 17
 184:	b2 07       	cpc	r27, r18
 186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
 188:	9f d0       	rcall	.+318    	; 0x2c8 <main>
 18a:	a6 c0       	rjmp	.+332    	; 0x2d8 <_exit>

0000018c <__bad_interrupt>:
 18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <vregs_writeout>:

/**
 * Copy the vregs to the buffer, where they can be accessed over ZebroBus
 * and UART1
 */
int8_t vregs_writeout(void){
 18e:	ac e0       	ldi	r26, 0x0C	; 12
 190:	b2 e2       	ldi	r27, 0x22	; 34
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs_buffer[!buffer_selector][cursor] = vregs[cursor];
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
 19a:	22 23       	and	r18, r18
 19c:	11 f0       	breq	.+4      	; 0x1a2 <vregs_writeout+0x14>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	45 e0       	ldi	r20, 0x05	; 5
 1a4:	51 e0       	ldi	r21, 0x01	; 1
 1a6:	84 9f       	mul	r24, r20
 1a8:	90 01       	movw	r18, r0
 1aa:	85 9f       	mul	r24, r21
 1ac:	30 0d       	add	r19, r0
 1ae:	94 9f       	mul	r25, r20
 1b0:	30 0d       	add	r19, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	f9 01       	movw	r30, r18
 1b6:	ee 5f       	subi	r30, 0xFE	; 254
 1b8:	ff 4d       	sbci	r31, 0xDF	; 223
 1ba:	29 5f       	subi	r18, 0xF9	; 249
 1bc:	3e 4d       	sbci	r19, 0xDE	; 222
 1be:	8d 91       	ld	r24, X+
 1c0:	81 93       	st	Z+, r24
 * and UART1
 */
int8_t vregs_writeout(void){
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 1c2:	e2 17       	cp	r30, r18
 1c4:	f3 07       	cpc	r31, r19
 1c6:	d9 f7       	brne	.-10     	; 0x1be <vregs_writeout+0x30>
	}

	/**
	 * BEGIN critical section
	 */
	interrupts_disable();
 1c8:	3e d0       	rcall	.+124    	; 0x246 <interrupts_disable>

	buffer_selector = !buffer_selector;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <_edata>
 1d0:	91 11       	cpse	r25, r1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>

	interrupts_enable();
 1d8:	3d d0       	rcall	.+122    	; 0x254 <interrupts_enable>
	/**
	 * END critical section
	 */

	return 0;
}
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

000001de <vregs_init>:
static int8_t buffer_selector = 0;

/**
 * Initialise the virtual registers. Set all fields to their default values.
 */
void vregs_init(void){
 1de:	ec e0       	ldi	r30, 0x0C	; 12
 1e0:	f2 e2       	ldi	r31, 0x22	; 34
 1e2:	81 e1       	ldi	r24, 0x11	; 17
 1e4:	93 e2       	ldi	r25, 0x23	; 35
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs[cursor] = 0;
 1e6:	11 92       	st	Z+, r1
 */
void vregs_init(void){
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 1e8:	e8 17       	cp	r30, r24
 1ea:	f9 07       	cpc	r31, r25
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <vregs_init+0x8>
		vregs[cursor] = 0;
	}

	vregs[VREGS_SERIAL_ID] = GLOBALS_SERIAL_ID;
 1ee:	ec e0       	ldi	r30, 0x0C	; 12
 1f0:	f2 e2       	ldi	r31, 0x22	; 34
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	83 83       	std	Z+3, r24	; 0x03
	vregs[VREGS_PRODUCT_ID] = GLOBALS_PRODUCT_ID;
 1f6:	11 82       	std	Z+1, r1	; 0x01
	vregs[VREGS_PRODUCT_VERSION] = GLOBALS_PRODUCT_VERSION;
 1f8:	82 83       	std	Z+2, r24	; 0x02
	vregs[VREGS_SOFTWARE_VERSION] = GLOBALS_SOFTWARE_VERSION;
 1fa:	14 82       	std	Z+4, r1	; 0x04
	vregs[VREGS_MOTOR_VOLTAgE] = GLOBALS_MOTOR_VOLTAGE;
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	86 a3       	std	Z+38, r24	; 0x26
	vregs[VREGS_FILE_TOTAL_SIZE - 1] = VREGS_SYNC_4;
 200:	8b e4       	ldi	r24, 0x4B	; 75
 202:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <vregs+0x104>
	vregs[VREGS_FILE_TOTAL_SIZE - 2] = VREGS_SYNC_3;
 206:	8a ee       	ldi	r24, 0xEA	; 234
 208:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <vregs+0x103>
	vregs[VREGS_FILE_TOTAL_SIZE - 3] = VREGS_SYNC_2;
 20c:	82 e1       	ldi	r24, 0x12	; 18
 20e:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <vregs+0x102>
	vregs[VREGS_FILE_TOTAL_SIZE - 4] = VREGS_SYNC_1;
 212:	85 e4       	ldi	r24, 0x45	; 69
 214:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <vregs+0x101>
	vregs[VREGS_FILE_TOTAL_SIZE - 5] = VREGS_SYNC_0;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <vregs+0x100>

	/* also initialise the buffers */
	vregs_writeout();
 21e:	b7 df       	rcall	.-146    	; 0x18e <vregs_writeout>
	vregs_writeout();
 220:	b6 cf       	rjmp	.-148    	; 0x18e <vregs_writeout>
 222:	08 95       	ret

00000224 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 22a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 22e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 232:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 236:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 23a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 23e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 242:	08 95       	ret

00000244 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 244:	08 95       	ret

00000246 <interrupts_disable>:
/**
 * disable interrupts, incrementing counter
 */
int8_t interrupts_disable(void){
	
	Disable_global_interrupt();
 246:	f8 94       	cli
	interrupt_counter++;
 248:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <interrupt_counter>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <interrupt_counter>

	return interrupt_counter;
}
 252:	08 95       	ret

00000254 <interrupts_enable>:
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 254:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <interrupt_counter>
 258:	81 50       	subi	r24, 0x01	; 1

	if(interrupt_counter <= 0){
 25a:	18 16       	cp	r1, r24
 25c:	1c f4       	brge	.+6      	; 0x264 <interrupts_enable+0x10>
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 25e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <interrupt_counter>
 262:	03 c0       	rjmp	.+6      	; 0x26a <interrupts_enable+0x16>

	if(interrupt_counter <= 0){
		/* in case strange this have happened, this might fix it */
		interrupt_counter = 0;
 264:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <interrupt_counter>
		Enable_global_interrupt();
 268:	78 94       	sei
	}

	return interrupt_counter;
}
 26a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <interrupt_counter>
 26e:	08 95       	ret

00000270 <leds_init>:

/** 
 * Toggle LED 1
 */
void leds_toggle_LD1(void){
	LEDS_LD1_PORT.OUTTGL |= LEDS_LD1_PIN;
 270:	a0 e8       	ldi	r26, 0x80	; 128
 272:	b6 e0       	ldi	r27, 0x06	; 6
 274:	8c 91       	ld	r24, X
 276:	88 60       	ori	r24, 0x08	; 8
 278:	8c 93       	st	X, r24
 27a:	e0 ee       	ldi	r30, 0xE0	; 224
 27c:	f7 e0       	ldi	r31, 0x07	; 7
 27e:	80 81       	ld	r24, Z
 280:	81 60       	ori	r24, 0x01	; 1
 282:	80 83       	st	Z, r24
 284:	16 96       	adiw	r26, 0x06	; 6
 286:	8c 91       	ld	r24, X
 288:	16 97       	sbiw	r26, 0x06	; 6
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	16 96       	adiw	r26, 0x06	; 6
 28e:	8c 93       	st	X, r24
 290:	86 81       	ldd	r24, Z+6	; 0x06
 292:	81 60       	ori	r24, 0x01	; 1
 294:	86 83       	std	Z+6, r24	; 0x06
 296:	08 95       	ret

00000298 <leds_blink_LD1_blocking>:
 * Use only during debugging
 */
void leds_blink_LD1_blocking(void){
	while (1)
	{
		LEDS_LD1_PORT.OUTTGL |= LEDS_LD1_PIN;
 298:	e0 e8       	ldi	r30, 0x80	; 128
 29a:	f6 e0       	ldi	r31, 0x06	; 6
 29c:	5b e0       	ldi	r21, 0x0B	; 11
 29e:	4b e8       	ldi	r20, 0x8B	; 139
 2a0:	32 e0       	ldi	r19, 0x02	; 2
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	87 81       	ldd	r24, Z+7	; 0x07
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	87 83       	std	Z+7, r24	; 0x07
 2aa:	85 2f       	mov	r24, r21
 2ac:	94 2f       	mov	r25, r20
 2ae:	a3 2f       	mov	r26, r19
 2b0:	b2 2f       	mov	r27, r18
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	a1 09       	sbc	r26, r1
 2b6:	b1 09       	sbc	r27, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <leds_blink_LD1_blocking+0x1a>
 2ba:	f4 cf       	rjmp	.-24     	; 0x2a4 <leds_blink_LD1_blocking+0xc>

000002bc <leds_set_LD2>:

/** 
 * Turn LED 2 on
 */
void leds_set_LD2(void){
	LEDS_LD2_PORT.OUTSET |= LEDS_LD2_PIN;
 2bc:	e0 ee       	ldi	r30, 0xE0	; 224
 2be:	f7 e0       	ldi	r31, 0x07	; 7
 2c0:	85 81       	ldd	r24, Z+5	; 0x05
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	85 83       	std	Z+5, r24	; 0x05
 2c6:	08 95       	ret

000002c8 <main>:

int main (void)
{
	/*some debugging code*/
		/* Initialise system clock */
		sysclk_init();
 2c8:	ad df       	rcall	.-166    	; 0x224 <sysclk_init>
		/* Initalise delay functions */
		delay_init(sysclk_get_cpu_hz());
	
	/* Initialise board parameters*/
	board_init();
 2ca:	bc df       	rcall	.-136    	; 0x244 <board_init>
	
	/* Insert application code here, after the board has been initialized. */
		/* Initialise leds */
		leds_init();
 2cc:	d1 df       	rcall	.-94     	; 0x270 <leds_init>
		interrupts_enable();
 2ce:	c2 df       	rcall	.-124    	; 0x254 <interrupts_enable>
		vregs_init();
 2d0:	86 df       	rcall	.-244    	; 0x1de <vregs_init>
		
		leds_set_LD2();
 2d2:	f4 df       	rcall	.-24     	; 0x2bc <leds_set_LD2>
		leds_blink_LD1_blocking();
 2d4:	e1 df       	rcall	.-62     	; 0x298 <leds_blink_LD1_blocking>
	
	
	while (1){
		
	}
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <main+0xe>

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
