
Pootmodule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031d  00802000  00802000  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e26  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ee9  00000000  00000000  00008bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073a0  00000000  00000000  0000cae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a88  00000000  00000000  00013e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c560  00000000  00000000  00014910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f2b  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00042d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ad06  00000000  00000000  00043023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	f8 c3       	rjmp	.+2032   	; 0x80a <__vector_6>
  1a:	00 00       	nop
  1c:	1a c4       	rjmp	.+2100   	; 0x852 <__vector_7>
  1e:	00 00       	nop
  20:	3c c4       	rjmp	.+2168   	; 0x89a <__vector_8>
  22:	00 00       	nop
  24:	5e c4       	rjmp	.+2236   	; 0x8e2 <__vector_9>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__vector_68>
 112:	00 00       	nop
 114:	c6 c0       	rjmp	.+396    	; 0x2a2 <__vector_69>
 116:	00 00       	nop
 118:	fb c0       	rjmp	.+502    	; 0x310 <__vector_70>
 11a:	00 00       	nop
 11c:	28 c1       	rjmp	.+592    	; 0x36e <__vector_71>
 11e:	00 00       	nop
 120:	54 c1       	rjmp	.+680    	; 0x3ca <__vector_72>
 122:	00 00       	nop
 124:	80 c1       	rjmp	.+768    	; 0x426 <__vector_73>
 126:	00 00       	nop
 128:	ac c1       	rjmp	.+856    	; 0x482 <__vector_74>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ea e7       	ldi	r30, 0x7A	; 122
 210:	f9 e0       	ldi	r31, 0x09	; 9
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	23 e2       	ldi	r18, 0x23	; 35
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	ad 31       	cpi	r26, 0x1D	; 29
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	84 d3       	rcall	.+1800   	; 0x938 <main>
 230:	a2 c3       	rjmp	.+1860   	; 0x976 <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if (ac_aca_callback) {
 256:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 25a:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
 25e:	30 97       	sbiw	r30, 0x00	; 0
 260:	79 f0       	breq	.+30     	; 0x280 <__vector_68+0x4c>
		if (ACA.STATUS & AC_AC0STATE_bm) {
 262:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
 266:	84 ff       	sbrs	r24, 4
 268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_68+0x42>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	09 95       	icall
 274:	05 c0       	rjmp	.+10     	; 0x280 <__vector_68+0x4c>
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
 276:	40 e8       	ldi	r20, 0x80	; 128
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	09 95       	icall
		}
	}
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
	if (ac_aca_callback) {
 2c4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 2c8:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
 2cc:	30 97       	sbiw	r30, 0x00	; 0
 2ce:	79 f0       	breq	.+30     	; 0x2ee <__vector_69+0x4c>
		if (ACA.STATUS & AC_AC1STATE_bm) {
 2d0:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <__vector_69+0x42>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	93 e0       	ldi	r25, 0x03	; 3
 2e0:	09 95       	icall
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <__vector_69+0x4c>
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
 2e4:	40 e8       	ldi	r20, 0x80	; 128
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	09 95       	icall
		}
	}
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	if (ac_aca_callback) {
 332:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 336:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
 33a:	30 97       	sbiw	r30, 0x00	; 0
 33c:	39 f0       	breq	.+14     	; 0x34c <__vector_70+0x3c>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
 33e:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
 342:	40 7c       	andi	r20, 0xC0	; 192
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	09 95       	icall
					AC_WSTATE_gm));
	}
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
 390:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 394:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 398:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <adca_callback>
 39c:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <adca_callback+0x1>
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	09 95       	icall
}
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
 3ec:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
 3f0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
 3f4:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <adca_callback>
 3f8:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <adca_callback+0x1>
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	09 95       	icall
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
 448:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
 44c:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
 450:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <adca_callback>
 454:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <adca_callback+0x1>
 458:	64 e0       	ldi	r22, 0x04	; 4
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	09 95       	icall
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
 4a4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
 4a8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
 4ac:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <adca_callback>
 4b0:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <adca_callback+0x1>
 4b4:	68 e0       	ldi	r22, 0x08	; 8
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	09 95       	icall
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <clock_init>:
#include <avr/io.h>
#include "../inc/clock.h"

void clock_init(void)
{
	CCP = CCP_IOREG_gc;
 4de:	88 ed       	ldi	r24, 0xD8	; 216
 4e0:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32MEN_bm;
 4e2:	e0 e5       	ldi	r30, 0x50	; 80
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	82 60       	ori	r24, 0x02	; 2
 4ea:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 4ec:	81 81       	ldd	r24, Z+1	; 0x01
 4ee:	81 ff       	sbrs	r24, 1
 4f0:	fd cf       	rjmp	.-6      	; 0x4ec <clock_init+0xe>
	CCP = CCP_IOREG_gc;
 4f2:	88 ed       	ldi	r24, 0xD8	; 216
 4f4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 4fc:	08 95       	ret

000004fe <hbridge_init>:
 */
void hbridge_lock_anti_phase(uint16_t dutycycle){
	/* Set the output compare value to the dutycycle */
	TCC0.CCA = (dutycycle>>3);
	/* Enable timer outputs */
	AWEXC.OUTOVEN |= (HBRIDGE_PIN_1 | HBRIDGE_PIN_2);
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	0b d1       	rcall	.+534    	; 0x71e <sysclk_enable_module>
 508:	64 e0       	ldi	r22, 0x04	; 4
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	08 d1       	rcall	.+528    	; 0x71e <sysclk_enable_module>
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f8 e0       	ldi	r31, 0x08	; 8
 512:	81 81       	ldd	r24, Z+1	; 0x01
 514:	85 60       	ori	r24, 0x05	; 5
 516:	81 83       	std	Z+1, r24	; 0x01
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e2       	ldi	r25, 0x20	; 32
 51c:	86 a3       	std	Z+38, r24	; 0x26
 51e:	97 a3       	std	Z+39, r25	; 0x27
 520:	81 81       	ldd	r24, Z+1	; 0x01
 522:	80 61       	ori	r24, 0x10	; 16
 524:	81 83       	std	Z+1, r24	; 0x01
 526:	8f e2       	ldi	r24, 0x2F	; 47
 528:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <__TEXT_REGION_LENGTH__+0x700880>
 52c:	a0 e4       	ldi	r26, 0x40	; 64
 52e:	b6 e0       	ldi	r27, 0x06	; 6
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	15 96       	adiw	r26, 0x05	; 5
 534:	8c 93       	st	X, r24
 536:	15 97       	sbiw	r26, 0x05	; 5
 538:	80 e2       	ldi	r24, 0x20	; 32
 53a:	16 96       	adiw	r26, 0x06	; 6
 53c:	8c 93       	st	X, r24
 53e:	16 97       	sbiw	r26, 0x06	; 6
 540:	c0 e9       	ldi	r28, 0x90	; 144
 542:	d8 e0       	ldi	r29, 0x08	; 8
 544:	88 81       	ld	r24, Y
 546:	85 60       	ori	r24, 0x05	; 5
 548:	88 83       	st	Y, r24
 54a:	80 81       	ld	r24, Z
 54c:	81 60       	ori	r24, 0x01	; 1
 54e:	80 83       	st	Z, r24
 550:	88 e2       	ldi	r24, 0x28	; 40
 552:	11 96       	adiw	r26, 0x01	; 1
 554:	8c 93       	st	X, r24
 556:	11 97       	sbiw	r26, 0x01	; 1
 558:	55 96       	adiw	r26, 0x15	; 21
 55a:	8c 91       	ld	r24, X
 55c:	55 97       	sbiw	r26, 0x15	; 21
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	55 96       	adiw	r26, 0x15	; 21
 562:	8c 93       	st	X, r24
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <hbridge_sign_magnitude>:
}

void hbridge_sign_magnitude(uint8_t direction, uint16_t dutycycle){
	/* Set the output compare value to the dutycycle */
	TCC0.CCA = (dutycycle>>3);
 56a:	76 95       	lsr	r23
 56c:	67 95       	ror	r22
 56e:	76 95       	lsr	r23
 570:	67 95       	ror	r22
 572:	76 95       	lsr	r23
 574:	67 95       	ror	r22
 576:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 57a:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	/* Enable timer output on pin 2, disable on pin 1 */
	AWEXC.OUTOVEN |= HBRIDGE_PIN_2;
 57e:	e0 e8       	ldi	r30, 0x80	; 128
 580:	f8 e0       	ldi	r31, 0x08	; 8
 582:	94 85       	ldd	r25, Z+12	; 0x0c
 584:	90 62       	ori	r25, 0x20	; 32
 586:	94 87       	std	Z+12, r25	; 0x0c
	AWEXC.OUTOVEN &= ~HBRIDGE_PIN_1;
 588:	94 85       	ldd	r25, Z+12	; 0x0c
 58a:	97 7f       	andi	r25, 0xF7	; 247
 58c:	94 87       	std	Z+12, r25	; 0x0c
	/* Set out bit of the uninverted pin to set direction*/
	if (direction) {
 58e:	88 23       	and	r24, r24
 590:	21 f0       	breq	.+8      	; 0x59a <hbridge_sign_magnitude+0x30>
		HBRIDGE_PORT.OUTSET = HBRIDGE_PIN_1;
 592:	88 e0       	ldi	r24, 0x08	; 8
 594:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 598:	08 95       	ret
	}
	else {
		HBRIDGE_PORT.OUTCLR = HBRIDGE_PIN_1;
 59a:	88 e0       	ldi	r24, 0x08	; 8
 59c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 5a0:	08 95       	ret

000005a2 <interrupts_disable>:
/**
 * disable interrupts, incrementing counter
 */
int8_t interrupts_disable(void){
	
	Disable_global_interrupt();
 5a2:	f8 94       	cli
	interrupt_counter++;
 5a4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <interrupt_counter>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <interrupt_counter>

	return interrupt_counter;
}
 5ae:	08 95       	ret

000005b0 <interrupts_enable>:
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 5b0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <interrupt_counter>
 5b4:	81 50       	subi	r24, 0x01	; 1

	if(interrupt_counter <= 0){
 5b6:	18 16       	cp	r1, r24
 5b8:	1c f4       	brge	.+6      	; 0x5c0 <interrupts_enable+0x10>
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 5ba:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <interrupt_counter>
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <interrupts_enable+0x16>

	if(interrupt_counter <= 0){
		/* in case strange this have happened, this might fix it */
		interrupt_counter = 0;
 5c0:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <interrupt_counter>
		Enable_global_interrupt();
 5c4:	78 94       	sei
	}

	return interrupt_counter;
}
 5c6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <interrupt_counter>
 5ca:	08 95       	ret

000005cc <leds_init>:
 * Initialise the leds
 * configure output pins
 */
void leds_init(void){
	/* Configure pins as output, write '1' to direction register */
	LEDS_LD1_PORT.DIR |= LEDS_LD1_PIN;
 5cc:	a0 e8       	ldi	r26, 0x80	; 128
 5ce:	b6 e0       	ldi	r27, 0x06	; 6
 5d0:	8c 91       	ld	r24, X
 5d2:	88 60       	ori	r24, 0x08	; 8
 5d4:	8c 93       	st	X, r24
	LEDS_LD2_PORT.DIR |= LEDS_LD2_PIN;
 5d6:	e0 ee       	ldi	r30, 0xE0	; 224
 5d8:	f7 e0       	ldi	r31, 0x07	; 7
 5da:	80 81       	ld	r24, Z
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	80 83       	st	Z, r24
	/* Turn leds off, write '1' to output clear register*/
	LEDS_LD1_PORT.OUTCLR |= LEDS_LD1_PIN;
 5e0:	16 96       	adiw	r26, 0x06	; 6
 5e2:	8c 91       	ld	r24, X
 5e4:	16 97       	sbiw	r26, 0x06	; 6
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	16 96       	adiw	r26, 0x06	; 6
 5ea:	8c 93       	st	X, r24
	LEDS_LD2_PORT.OUTCLR |= LEDS_LD2_PIN;
 5ec:	86 81       	ldd	r24, Z+6	; 0x06
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	86 83       	std	Z+6, r24	; 0x06
 5f2:	08 95       	ret

000005f4 <leds_set_LD1>:

/** 
 * Turn LED 1 on
 */
void leds_set_LD1(void){
	LEDS_LD1_PORT.OUTSET |= LEDS_LD1_PIN;
 5f4:	e0 e8       	ldi	r30, 0x80	; 128
 5f6:	f6 e0       	ldi	r31, 0x06	; 6
 5f8:	85 81       	ldd	r24, Z+5	; 0x05
 5fa:	88 60       	ori	r24, 0x08	; 8
 5fc:	85 83       	std	Z+5, r24	; 0x05
 5fe:	08 95       	ret

00000600 <leds_clear_LD1>:

/** 
 * Turn LED 1 off
 */
void leds_clear_LD1(void){
	LEDS_LD1_PORT.OUTCLR |= LEDS_LD1_PIN;
 600:	e0 e8       	ldi	r30, 0x80	; 128
 602:	f6 e0       	ldi	r31, 0x06	; 6
 604:	86 81       	ldd	r24, Z+6	; 0x06
 606:	88 60       	ori	r24, 0x08	; 8
 608:	86 83       	std	Z+6, r24	; 0x06
 60a:	08 95       	ret

0000060c <uart1_pins_init>:
	 * THIRD enable the DMA channel
	 */
	DMA_CH3_CTRLA |= DMA_ENABLE_bm;

	return 0;
}
 60c:	e0 e6       	ldi	r30, 0x60	; 96
 60e:	f6 e0       	ldi	r31, 0x06	; 6
 610:	88 e0       	ldi	r24, 0x08	; 8
 612:	82 83       	std	Z+2, r24	; 0x02
 614:	85 83       	std	Z+5, r24	; 0x05
 616:	81 83       	std	Z+1, r24	; 0x01
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	82 83       	std	Z+2, r24	; 0x02
 61c:	88 e1       	ldi	r24, 0x18	; 24
 61e:	82 8b       	std	Z+18, r24	; 0x12
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	08 95       	ret

00000624 <uart1_init>:
 624:	60 e1       	ldi	r22, 0x10	; 16
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	7a d0       	rcall	.+244    	; 0x71e <sysclk_enable_module>
 62a:	f0 df       	rcall	.-32     	; 0x60c <uart1_pins_init>
 62c:	e0 ea       	ldi	r30, 0xA0	; 160
 62e:	f9 e0       	ldi	r31, 0x09	; 9
 630:	83 e8       	ldi	r24, 0x83	; 131
 632:	86 83       	std	Z+6, r24	; 0x06
 634:	80 ed       	ldi	r24, 0xD0	; 208
 636:	87 83       	std	Z+7, r24	; 0x07
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	85 83       	std	Z+5, r24	; 0x05
 63c:	88 e1       	ldi	r24, 0x18	; 24
 63e:	84 83       	std	Z+4, r24	; 0x04
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret

00000644 <uart1_send_raw>:
/**
 * Send out a raw byte over USART
 * This function uses busy waits
 * This function is used for debug purposes
 */
int8_t uart1_send_raw(uint8_t tx_data){
 644:	cf 93       	push	r28
 646:	c8 2f       	mov	r28, r24
	/* wait for transmit data register to be empty */
	leds_set_LD1();
 648:	d5 df       	rcall	.-86     	; 0x5f4 <leds_set_LD1>
	while(!(USARTD0.STATUS & USART_DREIF_bm)){}
 64a:	e0 ea       	ldi	r30, 0xA0	; 160
 64c:	f9 e0       	ldi	r31, 0x09	; 9
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	95 ff       	sbrs	r25, 5
 652:	fd cf       	rjmp	.-6      	; 0x64e <uart1_send_raw+0xa>
	leds_clear_LD1();
 654:	d5 df       	rcall	.-86     	; 0x600 <leds_clear_LD1>
	/* clear flag */
	USARTD0.STATUS |= USART_TXCIF_bm;
 656:	e0 ea       	ldi	r30, 0xA0	; 160
 658:	f9 e0       	ldi	r31, 0x09	; 9
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	90 64       	ori	r25, 0x40	; 64
 65e:	91 83       	std	Z+1, r25	; 0x01
	/* place new data in transmit data register */
	USARTD0.DATA = tx_data;
 660:	c0 83       	st	Z, r28
	//USARTD0.CTRLB |= USART_TXEN_bm;

	return 0;
}
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <vregs_writeout>:

/**
 * Copy the vregs to the buffer, where they can be accessed over ZebroBus
 * and UART1
 */
int8_t vregs_writeout(void){
 668:	a0 e1       	ldi	r26, 0x10	; 16
 66a:	b2 e2       	ldi	r27, 0x22	; 34
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs_buffer[!buffer_selector][cursor] = vregs[cursor];
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <buffer_selector>
 674:	22 23       	and	r18, r18
 676:	11 f0       	breq	.+4      	; 0x67c <vregs_writeout+0x14>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	45 e0       	ldi	r20, 0x05	; 5
 67e:	51 e0       	ldi	r21, 0x01	; 1
 680:	84 9f       	mul	r24, r20
 682:	90 01       	movw	r18, r0
 684:	85 9f       	mul	r24, r21
 686:	30 0d       	add	r19, r0
 688:	94 9f       	mul	r25, r20
 68a:	30 0d       	add	r19, r0
 68c:	11 24       	eor	r1, r1
 68e:	f9 01       	movw	r30, r18
 690:	ea 5f       	subi	r30, 0xFA	; 250
 692:	ff 4d       	sbci	r31, 0xDF	; 223
 694:	25 5f       	subi	r18, 0xF5	; 245
 696:	3e 4d       	sbci	r19, 0xDE	; 222
 698:	8d 91       	ld	r24, X+
 69a:	81 93       	st	Z+, r24
 * and UART1
 */
int8_t vregs_writeout(void){
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 69c:	e2 17       	cp	r30, r18
 69e:	f3 07       	cpc	r31, r19
 6a0:	d9 f7       	brne	.-10     	; 0x698 <vregs_writeout+0x30>
	}

	/**
	 * BEGIN critical section
	 */
	interrupts_disable();
 6a2:	7f df       	rcall	.-258    	; 0x5a2 <interrupts_disable>

	buffer_selector = !buffer_selector;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <buffer_selector>
 6aa:	91 11       	cpse	r25, r1
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <buffer_selector>

	interrupts_enable();
 6b2:	7e df       	rcall	.-260    	; 0x5b0 <interrupts_enable>
	/**
	 * END critical section
	 */

	return 0;
}
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret

000006b8 <vregs_init>:
static int8_t buffer_selector = 0;

/**
 * Initialise the virtual registers. Set all fields to their default values.
 */
void vregs_init(void){
 6b8:	e0 e1       	ldi	r30, 0x10	; 16
 6ba:	f2 e2       	ldi	r31, 0x22	; 34
 6bc:	85 e1       	ldi	r24, 0x15	; 21
 6be:	93 e2       	ldi	r25, 0x23	; 35
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs[cursor] = 0;
 6c0:	11 92       	st	Z+, r1
 */
void vregs_init(void){
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 6c2:	e8 17       	cp	r30, r24
 6c4:	f9 07       	cpc	r31, r25
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <vregs_init+0x8>
		vregs[cursor] = 0;
	}

	vregs[VREGS_SERIAL_ID] = GLOBALS_SERIAL_ID;
 6c8:	e0 e1       	ldi	r30, 0x10	; 16
 6ca:	f2 e2       	ldi	r31, 0x22	; 34
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	83 83       	std	Z+3, r24	; 0x03
	vregs[VREGS_PRODUCT_ID] = GLOBALS_PRODUCT_ID;
 6d0:	11 82       	std	Z+1, r1	; 0x01
	vregs[VREGS_PRODUCT_VERSION] = GLOBALS_PRODUCT_VERSION;
 6d2:	82 83       	std	Z+2, r24	; 0x02
	vregs[VREGS_SOFTWARE_VERSION] = GLOBALS_SOFTWARE_VERSION;
 6d4:	14 82       	std	Z+4, r1	; 0x04
	vregs[VREGS_MOTOR_VOLTAgE] = GLOBALS_MOTOR_VOLTAGE;
 6d6:	86 e0       	ldi	r24, 0x06	; 6
 6d8:	86 a3       	std	Z+38, r24	; 0x26
	vregs[VREGS_FILE_TOTAL_SIZE - 1] = VREGS_SYNC_4;
 6da:	8b e4       	ldi	r24, 0x4B	; 75
 6dc:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <vregs+0x104>
	vregs[VREGS_FILE_TOTAL_SIZE - 2] = VREGS_SYNC_3;
 6e0:	8a ee       	ldi	r24, 0xEA	; 234
 6e2:	80 93 13 23 	sts	0x2313, r24	; 0x802313 <vregs+0x103>
	vregs[VREGS_FILE_TOTAL_SIZE - 3] = VREGS_SYNC_2;
 6e6:	82 e1       	ldi	r24, 0x12	; 18
 6e8:	80 93 12 23 	sts	0x2312, r24	; 0x802312 <vregs+0x102>
	vregs[VREGS_FILE_TOTAL_SIZE - 4] = VREGS_SYNC_1;
 6ec:	85 e4       	ldi	r24, 0x45	; 69
 6ee:	80 93 11 23 	sts	0x2311, r24	; 0x802311 <vregs+0x101>
	vregs[VREGS_FILE_TOTAL_SIZE - 5] = VREGS_SYNC_0;
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <vregs+0x100>

	/* also initialise the buffers */
	vregs_writeout();
 6f8:	b7 df       	rcall	.-146    	; 0x668 <vregs_writeout>
	vregs_writeout();
 6fa:	b6 cf       	rjmp	.-148    	; 0x668 <vregs_writeout>
 6fc:	08 95       	ret

000006fe <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 704:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 708:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 70c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 710:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 714:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 718:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 71c:	08 95       	ret

0000071e <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	1f 92       	push	r1
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 728:	9f b7       	in	r25, 0x3f	; 63
 72a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 72c:	f8 94       	cli
	return flags;
 72e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 730:	e8 2f       	mov	r30, r24
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	e0 59       	subi	r30, 0x90	; 144
 736:	ff 4f       	sbci	r31, 0xFF	; 255
 738:	60 95       	com	r22
 73a:	80 81       	ld	r24, Z
 73c:	68 23       	and	r22, r24
 73e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 740:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 742:	0f 90       	pop	r0
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	f9 01       	movw	r30, r18
 754:	71 96       	adiw	r30, 0x11	; 17
 756:	e2 95       	swap	r30
 758:	f2 95       	swap	r31
 75a:	f0 7f       	andi	r31, 0xF0	; 240
 75c:	fe 27       	eor	r31, r30
 75e:	e0 7f       	andi	r30, 0xF0	; 240
 760:	fe 27       	eor	r31, r30
 762:	a0 e0       	ldi	r26, 0x00	; 0
 764:	b1 e0       	ldi	r27, 0x01	; 1
 766:	14 96       	adiw	r26, 0x04	; 4
 768:	9c 91       	ld	r25, X
 76a:	14 97       	sbiw	r26, 0x04	; 4
 76c:	13 96       	adiw	r26, 0x03	; 3
 76e:	6c 91       	ld	r22, X
 770:	d9 01       	movw	r26, r18
 772:	14 96       	adiw	r26, 0x04	; 4
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	ea 01       	movw	r28, r20
 77a:	0a 2e       	mov	r0, r26
 77c:	02 c0       	rjmp	.+4      	; 0x782 <dma_interrupt+0x38>
 77e:	cc 0f       	add	r28, r28
 780:	dd 1f       	adc	r29, r29
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <dma_interrupt+0x34>
 786:	08 2e       	mov	r0, r24
 788:	02 c0       	rjmp	.+4      	; 0x78e <dma_interrupt+0x44>
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <dma_interrupt+0x40>
 792:	4c 2b       	or	r20, r28
 794:	64 23       	and	r22, r20
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	eb 01       	movw	r28, r22
 79a:	0a 2e       	mov	r0, r26
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <dma_interrupt+0x58>
 79e:	d5 95       	asr	r29
 7a0:	c7 95       	ror	r28
 7a2:	0a 94       	dec	r0
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <dma_interrupt+0x54>
 7a6:	c0 fd       	sbrc	r28, 0
 7a8:	1a c0       	rjmp	.+52     	; 0x7de <dma_interrupt+0x94>
 7aa:	08 2e       	mov	r0, r24
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <dma_interrupt+0x68>
 7ae:	75 95       	asr	r23
 7b0:	67 95       	ror	r22
 7b2:	0a 94       	dec	r0
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <dma_interrupt+0x64>
 7b6:	60 fd       	sbrc	r22, 0
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <dma_interrupt+0x98>
 7ba:	49 23       	and	r20, r25
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	ba 01       	movw	r22, r20
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <dma_interrupt+0x7c>
 7c2:	75 95       	asr	r23
 7c4:	67 95       	ror	r22
 7c6:	aa 95       	dec	r26
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <dma_interrupt+0x78>
 7ca:	60 fd       	sbrc	r22, 0
 7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <dma_interrupt+0x9c>
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <dma_interrupt+0x8a>
 7d0:	55 95       	asr	r21
 7d2:	47 95       	ror	r20
 7d4:	8a 95       	dec	r24
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <dma_interrupt+0x86>
 7d8:	84 2f       	mov	r24, r20
 7da:	81 70       	andi	r24, 0x01	; 1
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <dma_interrupt+0x9e>
 7de:	84 e0       	ldi	r24, 0x04	; 4
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <dma_interrupt+0x9e>
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <dma_interrupt+0x9e>
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	91 81       	ldd	r25, Z+1	; 0x01
 7ea:	90 63       	ori	r25, 0x30	; 48
 7ec:	91 83       	std	Z+1, r25	; 0x01
 7ee:	22 0f       	add	r18, r18
 7f0:	33 1f       	adc	r19, r19
 7f2:	f9 01       	movw	r30, r18
 7f4:	eb 5e       	subi	r30, 0xEB	; 235
 7f6:	fc 4d       	sbci	r31, 0xDC	; 220
 7f8:	01 90       	ld	r0, Z+
 7fa:	f0 81       	ld	r31, Z
 7fc:	e0 2d       	mov	r30, r0
 7fe:	30 97       	sbiw	r30, 0x00	; 0
 800:	09 f0       	breq	.+2      	; 0x804 <dma_interrupt+0xba>
 802:	09 95       	icall
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	dma_interrupt(0);
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	8d df       	rcall	.-230    	; 0x74a <dma_interrupt>
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
	dma_interrupt(1);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	69 df       	rcall	.-302    	; 0x74a <dma_interrupt>
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	2f 93       	push	r18
 8a6:	3f 93       	push	r19
 8a8:	4f 93       	push	r20
 8aa:	5f 93       	push	r21
 8ac:	6f 93       	push	r22
 8ae:	7f 93       	push	r23
 8b0:	8f 93       	push	r24
 8b2:	9f 93       	push	r25
 8b4:	af 93       	push	r26
 8b6:	bf 93       	push	r27
 8b8:	ef 93       	push	r30
 8ba:	ff 93       	push	r31
	dma_interrupt(2);
 8bc:	82 e0       	ldi	r24, 0x02	; 2
 8be:	45 df       	rcall	.-374    	; 0x74a <dma_interrupt>
}
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	bf 91       	pop	r27
 8c6:	af 91       	pop	r26
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	7f 91       	pop	r23
 8ce:	6f 91       	pop	r22
 8d0:	5f 91       	pop	r21
 8d2:	4f 91       	pop	r20
 8d4:	3f 91       	pop	r19
 8d6:	2f 91       	pop	r18
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
 8e2:	1f 92       	push	r1
 8e4:	0f 92       	push	r0
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	0f 92       	push	r0
 8ea:	11 24       	eor	r1, r1
 8ec:	2f 93       	push	r18
 8ee:	3f 93       	push	r19
 8f0:	4f 93       	push	r20
 8f2:	5f 93       	push	r21
 8f4:	6f 93       	push	r22
 8f6:	7f 93       	push	r23
 8f8:	8f 93       	push	r24
 8fa:	9f 93       	push	r25
 8fc:	af 93       	push	r26
 8fe:	bf 93       	push	r27
 900:	ef 93       	push	r30
 902:	ff 93       	push	r31
	dma_interrupt(3);
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	21 df       	rcall	.-446    	; 0x74a <dma_interrupt>
}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	7f 91       	pop	r23
 916:	6f 91       	pop	r22
 918:	5f 91       	pop	r21
 91a:	4f 91       	pop	r20
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 92a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 92c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 92e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 930:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 932:	60 83       	st	Z, r22
	ret                             // Return to caller
 934:	08 95       	ret

00000936 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 936:	08 95       	ret

00000938 <main>:

int main (void)
{
	/*some debugging code*/
		/* Initialise system clock */
		sysclk_init();
 938:	e2 de       	rcall	.-572    	; 0x6fe <sysclk_init>
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint8_t src)
{
	ccp_write_io((uint8_t *)&CLK.CTRL, src);
 93a:	61 e0       	ldi	r22, 0x01	; 1
 93c:	80 e4       	ldi	r24, 0x40	; 64
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	f4 df       	rcall	.-24     	; 0x92a <ccp_write_io>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	81 e4       	ldi	r24, 0x41	; 65
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	f0 df       	rcall	.-32     	; 0x92a <ccp_write_io>
		sysclk_set_source(SYSCLK_SRC_RC32MHZ);
		sysclk_set_prescalers(SYSCLK_PSADIV_1, SYSCLK_PSBCDIV_1_1);
		clock_init();
 94a:	c9 dd       	rcall	.-1134   	; 0x4de <clock_init>
		/* Initalise delay functions */
		delay_init(sysclk_get_cpu_hz());
	
	/* Initialise board parameters*/
	board_init();
 94c:	f4 df       	rcall	.-24     	; 0x936 <board_init>
	
	/* Insert application code here, after the board has been initialized. */
		
		leds_init();
 94e:	3e de       	rcall	.-900    	; 0x5cc <leds_init>
		
		vregs_init();
 950:	b3 de       	rcall	.-666    	; 0x6b8 <vregs_init>
		uart1_init();
 952:	68 de       	rcall	.-816    	; 0x624 <uart1_init>
		interrupts_enable();
 954:	2d de       	rcall	.-934    	; 0x5b0 <interrupts_enable>
		leds_set_LD1();
 956:	4e de       	rcall	.-868    	; 0x5f4 <leds_set_LD1>
		hbridge_init();
 958:	d2 dd       	rcall	.-1116   	; 0x4fe <hbridge_init>
		hbridge_sign_magnitude(1, (0xFE));
 95a:	6e ef       	ldi	r22, 0xFE	; 254
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	04 de       	rcall	.-1016   	; 0x56a <hbridge_sign_magnitude>
			
	
	while (1){
		//UART_Transmit(0xAA);
		//UART1_TX_PORT.OUTTGL |= UART1_TX_PIN;
		uart1_send_raw(0xAA);
 962:	8a ea       	ldi	r24, 0xAA	; 170
 964:	6f de       	rcall	.-802    	; 0x644 <uart1_send_raw>
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
 96a:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 96c:	8e 34       	cpi	r24, 0x4E	; 78
 96e:	21 e0       	ldi	r18, 0x01	; 1
 970:	92 07       	cpc	r25, r18
 972:	d9 f7       	brne	.-10     	; 0x96a <main+0x32>
 974:	f6 cf       	rjmp	.-20     	; 0x962 <main+0x2a>

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
