
Pootmodule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000524  00802000  00802000  0000089c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000616d  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035cf  00000000  00000000  00006d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000053b9  00000000  00000000  0000a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  0000f694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002bfb1  00000000  00000000  0000fd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013c0  00000000  00000000  0003bd01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0003d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000022cc  00000000  00000000  0003d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c3       	rjmp	.+1734   	; 0x6e0 <__vector_6>
  1a:	00 00       	nop
  1c:	85 c3       	rjmp	.+1802   	; 0x728 <__vector_7>
  1e:	00 00       	nop
  20:	a7 c3       	rjmp	.+1870   	; 0x770 <__vector_8>
  22:	00 00       	nop
  24:	c9 c3       	rjmp	.+1938   	; 0x7b8 <__vector_9>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	ef c1       	rjmp	.+990    	; 0x4e0 <__vector_64>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	ea c1       	rjmp	.+980    	; 0x522 <__vector_83>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	7d c1       	rjmp	.+762    	; 0x45c <__vector_88>
 162:	00 00       	nop
 164:	1d c1       	rjmp	.+570    	; 0x3a0 <__vector_89>
 166:	00 00       	nop
 168:	5f c1       	rjmp	.+702    	; 0x428 <__vector_90>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e8 e2       	ldi	r30, 0x28	; 40
 210:	f8 e0       	ldi	r31, 0x08	; 8
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	25 e2       	ldi	r18, 0x25	; 37
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a4 32       	cpi	r26, 0x24	; 36
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	e9 d2       	rcall	.+1490   	; 0x802 <main>
 230:	f9 c2       	rjmp	.+1522   	; 0x824 <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <interrupts_disable>:
/**
 * disable interrupts, incrementing counter
 */
int8_t interrupts_disable(void){
	
	Disable_global_interrupt();
 234:	f8 94       	cli
	interrupt_counter++;
 236:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>

	return interrupt_counter;
}
 240:	08 95       	ret

00000242 <interrupts_enable>:
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 242:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 246:	81 50       	subi	r24, 0x01	; 1

	if(interrupt_counter <= 0){
 248:	18 16       	cp	r1, r24
 24a:	1c f4       	brge	.+6      	; 0x252 <interrupts_enable+0x10>
/**
 * decrement the interrupt disable counter
 * and enable interrupts when the counter reaches zero
 */
int8_t interrupts_enable(void){
	interrupt_counter--;
 24c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
 250:	03 c0       	rjmp	.+6      	; 0x258 <interrupts_enable+0x16>

	if(interrupt_counter <= 0){
		/* in case strange this have happened, this might fix it */
		interrupt_counter = 0;
 252:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_end>
		Enable_global_interrupt();
 256:	78 94       	sei
	}

	return interrupt_counter;
}
 258:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 25c:	08 95       	ret

0000025e <leds_init>:
 * Initialise the leds
 * configure output pins
 */
void leds_init(void){
	/* Configure pins as output, write '1' to direction register */
	LEDS_LD1_PORT.DIR |= LEDS_LD1_PIN;
 25e:	a0 e8       	ldi	r26, 0x80	; 128
 260:	b6 e0       	ldi	r27, 0x06	; 6
 262:	8c 91       	ld	r24, X
 264:	88 60       	ori	r24, 0x08	; 8
 266:	8c 93       	st	X, r24
	LEDS_LD2_PORT.DIR |= LEDS_LD2_PIN;
 268:	e0 ee       	ldi	r30, 0xE0	; 224
 26a:	f7 e0       	ldi	r31, 0x07	; 7
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
	/* Turn leds off, write '1' to output clear register*/
	LEDS_LD1_PORT.OUTCLR |= LEDS_LD1_PIN;
 272:	16 96       	adiw	r26, 0x06	; 6
 274:	8c 91       	ld	r24, X
 276:	16 97       	sbiw	r26, 0x06	; 6
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	16 96       	adiw	r26, 0x06	; 6
 27c:	8c 93       	st	X, r24
	LEDS_LD2_PORT.OUTCLR |= LEDS_LD2_PIN;
 27e:	86 81       	ldd	r24, Z+6	; 0x06
 280:	81 60       	ori	r24, 0x01	; 1
 282:	86 83       	std	Z+6, r24	; 0x06
 284:	08 95       	ret

00000286 <leds_set_LD1>:

/** 
 * Turn LED 1 on
 */
void leds_set_LD1(void){
	LEDS_LD1_PORT.OUTSET |= LEDS_LD1_PIN;
 286:	e0 e8       	ldi	r30, 0x80	; 128
 288:	f6 e0       	ldi	r31, 0x06	; 6
 28a:	85 81       	ldd	r24, Z+5	; 0x05
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	85 83       	std	Z+5, r24	; 0x05
 290:	08 95       	ret

00000292 <uart_init>:
	return receive_timeout;
}

void UART_Receive_timeout_clear(void)
{
	receive_timeout = false;
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	e0 e6       	ldi	r30, 0x60	; 96
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	82 83       	std	Z+2, r24	; 0x02
 29e:	24 e0       	ldi	r18, 0x04	; 4
 2a0:	22 83       	std	Z+2, r18	; 0x02
 2a2:	82 83       	std	Z+2, r24	; 0x02
 2a4:	85 83       	std	Z+5, r24	; 0x05
 2a6:	98 e1       	ldi	r25, 0x18	; 24
 2a8:	92 8b       	std	Z+18, r25	; 0x12
 2aa:	22 83       	std	Z+2, r18	; 0x02
 2ac:	a0 ea       	ldi	r26, 0xA0	; 160
 2ae:	b9 e0       	ldi	r27, 0x09	; 9
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	15 96       	adiw	r26, 0x05	; 5
 2b4:	8c 93       	st	X, r24
 2b6:	15 97       	sbiw	r26, 0x05	; 5
 2b8:	2c e0       	ldi	r18, 0x0C	; 12
 2ba:	16 96       	adiw	r26, 0x06	; 6
 2bc:	2c 93       	st	X, r18
 2be:	16 97       	sbiw	r26, 0x06	; 6
 2c0:	20 e3       	ldi	r18, 0x30	; 48
 2c2:	17 96       	adiw	r26, 0x07	; 7
 2c4:	2c 93       	st	X, r18
 2c6:	17 97       	sbiw	r26, 0x07	; 7
 2c8:	c0 e4       	ldi	r28, 0x40	; 64
 2ca:	d9 e0       	ldi	r29, 0x09	; 9
 2cc:	8e 83       	std	Y+6, r24	; 0x06
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	3d e7       	ldi	r19, 0x7D	; 125
 2d2:	2e a3       	std	Y+38, r18	; 0x26
 2d4:	3f a3       	std	Y+39, r19	; 0x27
 2d6:	18 a2       	std	Y+32, r1	; 0x20
 2d8:	19 a2       	std	Y+33, r1	; 0x21
 2da:	4f b7       	in	r20, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	21 e1       	ldi	r18, 0x11	; 17
 2e0:	33 e2       	ldi	r19, 0x23	; 35
 2e2:	20 93 10 24 	sts	0x2410, r18	; 0x802410 <data_receive+0xff>
 2e6:	30 93 11 24 	sts	0x2411, r19	; 0x802411 <data_receive+0x100>
 2ea:	20 93 12 24 	sts	0x2412, r18	; 0x802412 <data_receive+0x101>
 2ee:	30 93 13 24 	sts	0x2413, r19	; 0x802413 <data_receive+0x102>
 2f2:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <data_receive+0x103>
 2f6:	4f bf       	out	0x3f, r20	; 63
 2f8:	4f b7       	in	r20, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	28 e1       	ldi	r18, 0x18	; 24
 2fe:	34 e2       	ldi	r19, 0x24	; 36
 300:	20 93 17 25 	sts	0x2517, r18	; 0x802517 <data_transmit+0xff>
 304:	30 93 18 25 	sts	0x2518, r19	; 0x802518 <data_transmit+0x100>
 308:	20 93 19 25 	sts	0x2519, r18	; 0x802519 <data_transmit+0x101>
 30c:	30 93 1a 25 	sts	0x251A, r19	; 0x80251a <data_transmit+0x102>
 310:	10 92 1b 25 	sts	0x251B, r1	; 0x80251b <data_transmit+0x103>
 314:	4f bf       	out	0x3f, r20	; 63
 316:	14 96       	adiw	r26, 0x04	; 4
 318:	9c 93       	st	X, r25
 31a:	14 97       	sbiw	r26, 0x04	; 4
 31c:	13 96       	adiw	r26, 0x03	; 3
 31e:	1c 92       	st	X, r1
 320:	10 92 16 24 	sts	0x2416, r1	; 0x802416 <transmit_ongoing>
 324:	10 92 17 24 	sts	0x2417, r1	; 0x802417 <receive_ongoing>
 328:	10 92 15 24 	sts	0x2415, r1	; 0x802415 <receive_timeout>
 32c:	92 85       	ldd	r25, Z+10	; 0x0a
 32e:	94 60       	ori	r25, 0x04	; 4
 330:	92 87       	std	Z+10, r25	; 0x0a
 332:	92 89       	ldd	r25, Z+18	; 0x12
 334:	92 60       	ori	r25, 0x02	; 2
 336:	92 8b       	std	Z+18, r25	; 0x12
 338:	81 87       	std	Z+9, r24	; 0x09
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <UART_Transmit>:
 340:	2f b7       	in	r18, 0x3f	; 63
 342:	f8 94       	cli
 344:	90 91 1b 25 	lds	r25, 0x251B	; 0x80251b <data_transmit+0x103>
 348:	2f bf       	out	0x3f, r18	; 63
 34a:	9f 3f       	cpi	r25, 0xFF	; 255
 34c:	d9 f0       	breq	.+54     	; 0x384 <UART_Transmit+0x44>
 34e:	e7 e1       	ldi	r30, 0x17	; 23
 350:	f5 e2       	ldi	r31, 0x25	; 37
 352:	a0 81       	ld	r26, Z
 354:	b1 81       	ldd	r27, Z+1	; 0x01
 356:	8c 93       	st	X, r24
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24
 360:	91 83       	std	Z+1, r25	; 0x01
 362:	8e 17       	cp	r24, r30
 364:	9f 07       	cpc	r25, r31
 366:	31 f4       	brne	.+12     	; 0x374 <UART_Transmit+0x34>
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	94 e2       	ldi	r25, 0x24	; 36
 36c:	80 93 17 25 	sts	0x2517, r24	; 0x802517 <data_transmit+0xff>
 370:	90 93 18 25 	sts	0x2518, r25	; 0x802518 <data_transmit+0x100>
 374:	9f b7       	in	r25, 0x3f	; 63
 376:	f8 94       	cli
 378:	eb e1       	ldi	r30, 0x1B	; 27
 37a:	f5 e2       	ldi	r31, 0x25	; 37
 37c:	80 81       	ld	r24, Z
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 83       	st	Z, r24
 382:	9f bf       	out	0x3f, r25	; 63
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 38a:	e0 ea       	ldi	r30, 0xA0	; 160
 38c:	f9 e0       	ldi	r31, 0x09	; 9
 38e:	80 e4       	ldi	r24, 0x40	; 64
 390:	81 83       	std	Z+1, r24	; 0x01
 392:	83 81       	ldd	r24, Z+3	; 0x03
 394:	8f 60       	ori	r24, 0x0F	; 15
 396:	83 83       	std	Z+3, r24	; 0x03
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 16 24 	sts	0x2416, r24	; 0x802416 <transmit_ongoing>
 39e:	08 95       	ret

000003a0 <__vector_89>:

// interrupt functions

//Transmission data register empty register
ISR(UART_DRE_Vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3bc:	f8 94       	cli
			{
				Count = Buffer->Count;
 3be:	80 91 1b 25 	lds	r24, 0x251B	; 0x80251b <data_transmit+0x103>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3c2:	9f bf       	out	0x3f, r25	; 63
	// Check if all data is transmitted 
	if ( !RingBuffer_IsEmpty(&data_transmit) )
 3c4:	88 23       	and	r24, r24
 3c6:	e1 f0       	breq	.+56     	; 0x400 <__LOCK_REGION_LENGTH__>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 3c8:	a9 e1       	ldi	r26, 0x19	; 25
 3ca:	b5 e2       	ldi	r27, 0x25	; 37
 3cc:	ed 91       	ld	r30, X+
 3ce:	fc 91       	ld	r31, X
 3d0:	11 97       	sbiw	r26, 0x01	; 1
 3d2:	91 91       	ld	r25, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 3d4:	ed 93       	st	X+, r30
 3d6:	fc 93       	st	X, r31
 3d8:	e7 51       	subi	r30, 0x17	; 23
 3da:	f5 42       	sbci	r31, 0x25	; 37
 3dc:	31 f4       	brne	.+12     	; 0x3ea <__vector_89+0x4a>
			  Buffer->Out = Buffer->Buffer;
 3de:	28 e1       	ldi	r18, 0x18	; 24
 3e0:	34 e2       	ldi	r19, 0x24	; 36
 3e2:	20 93 19 25 	sts	0x2519, r18	; 0x802519 <data_transmit+0x101>
 3e6:	30 93 1a 25 	sts	0x251A, r19	; 0x80251a <data_transmit+0x102>

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3ea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3ec:	f8 94       	cli
			{
				Buffer->Count--;
 3ee:	eb e1       	ldi	r30, 0x1B	; 27
 3f0:	f5 e2       	ldi	r31, 0x25	; 37
 3f2:	80 81       	ld	r24, Z
 3f4:	81 50       	subi	r24, 0x01	; 1
 3f6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3f8:	2f bf       	out	0x3f, r18	; 63
	{
		UART.DATA = RingBuffer_Remove(&data_transmit);  // Start transmission
 3fa:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else
	{
		UART_disableDATAEMPTY;
 400:	e0 ea       	ldi	r30, 0xA0	; 160
 402:	f9 e0       	ldi	r31, 0x09	; 9
 404:	83 81       	ldd	r24, Z+3	; 0x03
 406:	8c 7f       	andi	r24, 0xFC	; 252
 408:	83 83       	std	Z+3, r24	; 0x03
		USARTD0.STATUS = USART_TXCIF_bm;
 40a:	80 e4       	ldi	r24, 0x40	; 64
 40c:	81 83       	std	Z+1, r24	; 0x01
	}
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_90>:

ISR(USARTD0_TXC_vect)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	8f 93       	push	r24
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	// if this is handled the transmission is complete 	
	UART_disableTransmit;
 438:	e0 ea       	ldi	r30, 0xA0	; 160
 43a:	f9 e0       	ldi	r31, 0x09	; 9
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	83 83       	std	Z+3, r24	; 0x03
	transmit_ongoing = false;
 442:	10 92 16 24 	sts	0x2416, r1	; 0x802416 <transmit_ongoing>
	UART_PORT.DIRCLR = UART_PORT_PIN_TX; // TX as input.
 446:	88 e0       	ldi	r24, 0x08	; 8
 448:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_88>:

//Receive interrupt
ISR(USARTD0_RXC_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 474:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 476:	f8 94       	cli
			{
				Count = Buffer->Count;
 478:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <data_receive+0x103>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 47c:	9f bf       	out	0x3f, r25	; 63
	if (!RingBuffer_IsFull(&data_receive))
 47e:	8f 3f       	cpi	r24, 0xFF	; 255
 480:	e9 f0       	breq	.+58     	; 0x4bc <__vector_88+0x60>
	{
		RingBuffer_Insert(&data_receive, UART.DATA);
 482:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 486:	e0 e1       	ldi	r30, 0x10	; 16
 488:	f4 e2       	ldi	r31, 0x24	; 36
 48a:	a0 81       	ld	r26, Z
 48c:	b1 81       	ldd	r27, Z+1	; 0x01
 48e:	8c 93       	st	X, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	80 83       	st	Z, r24
 498:	91 83       	std	Z+1, r25	; 0x01
 49a:	8e 17       	cp	r24, r30
 49c:	9f 07       	cpc	r25, r31
 49e:	31 f4       	brne	.+12     	; 0x4ac <__vector_88+0x50>
			  Buffer->In = Buffer->Buffer;
 4a0:	81 e1       	ldi	r24, 0x11	; 17
 4a2:	93 e2       	ldi	r25, 0x23	; 35
 4a4:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <data_receive+0xff>
 4a8:	90 93 11 24 	sts	0x2411, r25	; 0x802411 <data_receive+0x100>

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4ae:	f8 94       	cli
			{
				Buffer->Count++;
 4b0:	e4 e1       	ldi	r30, 0x14	; 20
 4b2:	f4 e2       	ldi	r31, 0x24	; 36
 4b4:	80 81       	ld	r24, Z
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4ba:	9f bf       	out	0x3f, r25	; 63
	}
	// reset and enabel timeout counter
	TCD1.CNT = 0;
 4bc:	e0 e4       	ldi	r30, 0x40	; 64
 4be:	f9 e0       	ldi	r31, 0x09	; 9
 4c0:	10 a2       	std	Z+32, r1	; 0x20
 4c2:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = TC_TC0_CLKSEL_DIV1_gc; // turns the counter on.
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
}
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_64>:

// On port D only the RX pin uses pin change interrupt. 
// RX pin change interrupt is used to allow power save sleep mode operation. 
ISR(UART_IO_RXDPIN_Vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
	receive_ongoing = true;
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	90 93 17 24 	sts	0x2417, r25	; 0x802417 <receive_ongoing>

	// disable pin interrupt / enable uart RX
	UART_PORT.INTCTRL = PORT_INT0LVL_OFF_gc;
 4f8:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <__TEXT_REGION_LENGTH__+0x700669>
	UART_enableReceive;
 4fc:	e0 ea       	ldi	r30, 0xA0	; 160
 4fe:	f9 e0       	ldi	r31, 0x09	; 9
 500:	83 81       	ldd	r24, Z+3	; 0x03
 502:	80 63       	ori	r24, 0x30	; 48
 504:	83 83       	std	Z+3, r24	; 0x03
	// reset and enabel timeout counter
	TCD1.CNT = 0;
 506:	e0 e4       	ldi	r30, 0x40	; 64
 508:	f9 e0       	ldi	r31, 0x09	; 9
 50a:	10 a2       	std	Z+32, r1	; 0x20
 50c:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = TC_TC0_CLKSEL_DIV1_gc; // turns the counter on.
 50e:	90 83       	st	Z, r25
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_83>:

ISR(TCD1_OVF_vect)
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	8f 93       	push	r24
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	// timeout occurred. turn uart receive off. 
	TCD1.CTRLA = TC_TC0_CLKSEL_OFF_gc; // turns the counter on.
 532:	e0 e4       	ldi	r30, 0x40	; 64
 534:	f9 e0       	ldi	r31, 0x09	; 9
 536:	10 82       	st	Z, r1
	TCD1.CNT = 0;
 538:	10 a2       	std	Z+32, r1	; 0x20
 53a:	11 a2       	std	Z+33, r1	; 0x21
	
	receive_timeout = true;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 93 15 24 	sts	0x2415, r24	; 0x802415 <receive_timeout>
	receive_ongoing = false;
 542:	10 92 17 24 	sts	0x2417, r1	; 0x802417 <receive_ongoing>
	// enable pin interrupt / disable RX
	UART_PORT.INTFLAGS = PORT_INT0IF_bm;
 546:	e0 e6       	ldi	r30, 0x60	; 96
 548:	f6 e0       	ldi	r31, 0x06	; 6
 54a:	84 87       	std	Z+12, r24	; 0x0c
	UART_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	81 87       	std	Z+9, r24	; 0x09
	UART_disableReceive;
 550:	e0 ea       	ldi	r30, 0xA0	; 160
 552:	f9 e0       	ldi	r31, 0x09	; 9
 554:	83 81       	ldd	r24, Z+3	; 0x03
 556:	8f 7c       	andi	r24, 0xCF	; 207
 558:	83 83       	std	Z+3, r24	; 0x03
}
 55a:	ff 91       	pop	r31
 55c:	ef 91       	pop	r30
 55e:	8f 91       	pop	r24
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <vregs_writeout>:

/**
 * Copy the vregs to the buffer, where they can be accessed over ZebroBus
 * and UART1
 */
int8_t vregs_writeout(void){
 56a:	ac e0       	ldi	r26, 0x0C	; 12
 56c:	b2 e2       	ldi	r27, 0x22	; 34
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs_buffer[!buffer_selector][cursor] = vregs[cursor];
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <buffer_selector>
 576:	22 23       	and	r18, r18
 578:	11 f0       	breq	.+4      	; 0x57e <vregs_writeout+0x14>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	45 e0       	ldi	r20, 0x05	; 5
 580:	51 e0       	ldi	r21, 0x01	; 1
 582:	84 9f       	mul	r24, r20
 584:	90 01       	movw	r18, r0
 586:	85 9f       	mul	r24, r21
 588:	30 0d       	add	r19, r0
 58a:	94 9f       	mul	r25, r20
 58c:	30 0d       	add	r19, r0
 58e:	11 24       	eor	r1, r1
 590:	f9 01       	movw	r30, r18
 592:	ee 5f       	subi	r30, 0xFE	; 254
 594:	ff 4d       	sbci	r31, 0xDF	; 223
 596:	29 5f       	subi	r18, 0xF9	; 249
 598:	3e 4d       	sbci	r19, 0xDE	; 222
 59a:	8d 91       	ld	r24, X+
 59c:	81 93       	st	Z+, r24
 * and UART1
 */
int8_t vregs_writeout(void){
	int16_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 59e:	e2 17       	cp	r30, r18
 5a0:	f3 07       	cpc	r31, r19
 5a2:	d9 f7       	brne	.-10     	; 0x59a <vregs_writeout+0x30>
	}

	/**
	 * BEGIN critical section
	 */
	interrupts_disable();
 5a4:	47 de       	rcall	.-882    	; 0x234 <interrupts_disable>

	buffer_selector = !buffer_selector;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <buffer_selector>
 5ac:	91 11       	cpse	r25, r1
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <buffer_selector>

	interrupts_enable();
 5b4:	46 de       	rcall	.-884    	; 0x242 <interrupts_enable>
	/**
	 * END critical section
	 */

	return 0;
}
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	08 95       	ret

000005ba <vregs_init>:
static int8_t buffer_selector = 0;

/**
 * Initialise the virtual registers. Set all fields to their default values.
 */
void vregs_init(void){
 5ba:	ec e0       	ldi	r30, 0x0C	; 12
 5bc:	f2 e2       	ldi	r31, 0x22	; 34
 5be:	81 e1       	ldi	r24, 0x11	; 17
 5c0:	93 e2       	ldi	r25, 0x23	; 35
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs[cursor] = 0;
 5c2:	11 92       	st	Z+, r1
 */
void vregs_init(void){
	int16_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
 5c4:	e8 17       	cp	r30, r24
 5c6:	f9 07       	cpc	r31, r25
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <vregs_init+0x8>
		vregs[cursor] = 0;
	}

	vregs[VREGS_SERIAL_ID] = GLOBALS_SERIAL_ID;
 5ca:	ec e0       	ldi	r30, 0x0C	; 12
 5cc:	f2 e2       	ldi	r31, 0x22	; 34
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	83 83       	std	Z+3, r24	; 0x03
	vregs[VREGS_PRODUCT_ID] = GLOBALS_PRODUCT_ID;
 5d2:	11 82       	std	Z+1, r1	; 0x01
	vregs[VREGS_PRODUCT_VERSION] = GLOBALS_PRODUCT_VERSION;
 5d4:	82 83       	std	Z+2, r24	; 0x02
	vregs[VREGS_SOFTWARE_VERSION] = GLOBALS_SOFTWARE_VERSION;
 5d6:	14 82       	std	Z+4, r1	; 0x04
	vregs[VREGS_MOTOR_VOLTAgE] = GLOBALS_MOTOR_VOLTAGE;
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	86 a3       	std	Z+38, r24	; 0x26
	vregs[VREGS_FILE_TOTAL_SIZE - 1] = VREGS_SYNC_4;
 5dc:	8b e4       	ldi	r24, 0x4B	; 75
 5de:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <vregs+0x104>
	vregs[VREGS_FILE_TOTAL_SIZE - 2] = VREGS_SYNC_3;
 5e2:	8a ee       	ldi	r24, 0xEA	; 234
 5e4:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <vregs+0x103>
	vregs[VREGS_FILE_TOTAL_SIZE - 3] = VREGS_SYNC_2;
 5e8:	82 e1       	ldi	r24, 0x12	; 18
 5ea:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <vregs+0x102>
	vregs[VREGS_FILE_TOTAL_SIZE - 4] = VREGS_SYNC_1;
 5ee:	85 e4       	ldi	r24, 0x45	; 69
 5f0:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <vregs+0x101>
	vregs[VREGS_FILE_TOTAL_SIZE - 5] = VREGS_SYNC_0;
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <vregs+0x100>

	/* also initialise the buffers */
	vregs_writeout();
 5fa:	b7 df       	rcall	.-146    	; 0x56a <vregs_writeout>
	vregs_writeout();
 5fc:	b6 cf       	rjmp	.-148    	; 0x56a <vregs_writeout>
 5fe:	08 95       	ret

00000600 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 606:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 60a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 60e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 612:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 616:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 61a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 61e:	08 95       	ret

00000620 <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	71 96       	adiw	r30, 0x11	; 17
 62c:	e2 95       	swap	r30
 62e:	f2 95       	swap	r31
 630:	f0 7f       	andi	r31, 0xF0	; 240
 632:	fe 27       	eor	r31, r30
 634:	e0 7f       	andi	r30, 0xF0	; 240
 636:	fe 27       	eor	r31, r30
 638:	a0 e0       	ldi	r26, 0x00	; 0
 63a:	b1 e0       	ldi	r27, 0x01	; 1
 63c:	14 96       	adiw	r26, 0x04	; 4
 63e:	9c 91       	ld	r25, X
 640:	14 97       	sbiw	r26, 0x04	; 4
 642:	13 96       	adiw	r26, 0x03	; 3
 644:	6c 91       	ld	r22, X
 646:	d9 01       	movw	r26, r18
 648:	14 96       	adiw	r26, 0x04	; 4
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	ea 01       	movw	r28, r20
 650:	0a 2e       	mov	r0, r26
 652:	02 c0       	rjmp	.+4      	; 0x658 <dma_interrupt+0x38>
 654:	cc 0f       	add	r28, r28
 656:	dd 1f       	adc	r29, r29
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <dma_interrupt+0x34>
 65c:	08 2e       	mov	r0, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <dma_interrupt+0x44>
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <dma_interrupt+0x40>
 668:	4c 2b       	or	r20, r28
 66a:	64 23       	and	r22, r20
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	eb 01       	movw	r28, r22
 670:	0a 2e       	mov	r0, r26
 672:	02 c0       	rjmp	.+4      	; 0x678 <dma_interrupt+0x58>
 674:	d5 95       	asr	r29
 676:	c7 95       	ror	r28
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <dma_interrupt+0x54>
 67c:	c0 fd       	sbrc	r28, 0
 67e:	1a c0       	rjmp	.+52     	; 0x6b4 <dma_interrupt+0x94>
 680:	08 2e       	mov	r0, r24
 682:	02 c0       	rjmp	.+4      	; 0x688 <dma_interrupt+0x68>
 684:	75 95       	asr	r23
 686:	67 95       	ror	r22
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <dma_interrupt+0x64>
 68c:	60 fd       	sbrc	r22, 0
 68e:	14 c0       	rjmp	.+40     	; 0x6b8 <dma_interrupt+0x98>
 690:	49 23       	and	r20, r25
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	ba 01       	movw	r22, r20
 696:	02 c0       	rjmp	.+4      	; 0x69c <dma_interrupt+0x7c>
 698:	75 95       	asr	r23
 69a:	67 95       	ror	r22
 69c:	aa 95       	dec	r26
 69e:	e2 f7       	brpl	.-8      	; 0x698 <dma_interrupt+0x78>
 6a0:	60 fd       	sbrc	r22, 0
 6a2:	0c c0       	rjmp	.+24     	; 0x6bc <dma_interrupt+0x9c>
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <dma_interrupt+0x8a>
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <dma_interrupt+0x86>
 6ae:	84 2f       	mov	r24, r20
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <dma_interrupt+0x9e>
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <dma_interrupt+0x9e>
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <dma_interrupt+0x9e>
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	90 63       	ori	r25, 0x30	; 48
 6c2:	91 83       	std	Z+1, r25	; 0x01
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	f9 01       	movw	r30, r18
 6ca:	e4 5e       	subi	r30, 0xE4	; 228
 6cc:	fa 4d       	sbci	r31, 0xDA	; 218
 6ce:	01 90       	ld	r0, Z+
 6d0:	f0 81       	ld	r31, Z
 6d2:	e0 2d       	mov	r30, r0
 6d4:	30 97       	sbiw	r30, 0x00	; 0
 6d6:	09 f0       	breq	.+2      	; 0x6da <dma_interrupt+0xba>
 6d8:	09 95       	icall
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
 6e0:	1f 92       	push	r1
 6e2:	0f 92       	push	r0
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	0f 92       	push	r0
 6e8:	11 24       	eor	r1, r1
 6ea:	2f 93       	push	r18
 6ec:	3f 93       	push	r19
 6ee:	4f 93       	push	r20
 6f0:	5f 93       	push	r21
 6f2:	6f 93       	push	r22
 6f4:	7f 93       	push	r23
 6f6:	8f 93       	push	r24
 6f8:	9f 93       	push	r25
 6fa:	af 93       	push	r26
 6fc:	bf 93       	push	r27
 6fe:	ef 93       	push	r30
 700:	ff 93       	push	r31
	dma_interrupt(0);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	8d df       	rcall	.-230    	; 0x620 <dma_interrupt>
}
 706:	ff 91       	pop	r31
 708:	ef 91       	pop	r30
 70a:	bf 91       	pop	r27
 70c:	af 91       	pop	r26
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	7f 91       	pop	r23
 714:	6f 91       	pop	r22
 716:	5f 91       	pop	r21
 718:	4f 91       	pop	r20
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
 728:	1f 92       	push	r1
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	0f 92       	push	r0
 730:	11 24       	eor	r1, r1
 732:	2f 93       	push	r18
 734:	3f 93       	push	r19
 736:	4f 93       	push	r20
 738:	5f 93       	push	r21
 73a:	6f 93       	push	r22
 73c:	7f 93       	push	r23
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
	dma_interrupt(1);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	69 df       	rcall	.-302    	; 0x620 <dma_interrupt>
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	dma_interrupt(2);
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	45 df       	rcall	.-374    	; 0x620 <dma_interrupt>
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	dma_interrupt(3);
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	21 df       	rcall	.-446    	; 0x620 <dma_interrupt>
}
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	bf 91       	pop	r27
 7e4:	af 91       	pop	r26
 7e6:	9f 91       	pop	r25
 7e8:	8f 91       	pop	r24
 7ea:	7f 91       	pop	r23
 7ec:	6f 91       	pop	r22
 7ee:	5f 91       	pop	r21
 7f0:	4f 91       	pop	r20
 7f2:	3f 91       	pop	r19
 7f4:	2f 91       	pop	r18
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 800:	08 95       	ret

00000802 <main>:

int main (void)
{
	/*some debugging code*/
		/* Initialise system clock */
		sysclk_init();
 802:	fe de       	rcall	.-516    	; 0x600 <sysclk_init>
		/* Initalise delay functions */
		delay_init(sysclk_get_cpu_hz());
	
	/* Initialise board parameters*/
	board_init();
 804:	fd df       	rcall	.-6      	; 0x800 <board_init>
	
	/* Insert application code here, after the board has been initialized. */
		/* Initialise leds */
		leds_init();
 806:	2b dd       	rcall	.-1450   	; 0x25e <leds_init>
		interrupts_enable();
 808:	1c dd       	rcall	.-1480   	; 0x242 <interrupts_enable>
		vregs_init();
 80a:	d7 de       	rcall	.-594    	; 0x5ba <vregs_init>
		uart_init();
 80c:	42 dd       	rcall	.-1404   	; 0x292 <uart_init>
		//UART1_TX_PORT.DIR |= UART1_TX_PIN;
		leds_set_LD1();
 80e:	3b dd       	rcall	.-1418   	; 0x286 <leds_set_LD1>
			
	
	while (1){
		UART_Transmit(0xAA);
 810:	8a ea       	ldi	r24, 0xAA	; 170
 812:	96 dd       	rcall	.-1236   	; 0x340 <UART_Transmit>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
 818:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 81a:	8e 34       	cpi	r24, 0x4E	; 78
 81c:	21 e0       	ldi	r18, 0x01	; 1
 81e:	92 07       	cpc	r25, r18
 820:	d9 f7       	brne	.-10     	; 0x818 <main+0x16>
 822:	f6 cf       	rjmp	.-20     	; 0x810 <main+0xe>

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
