/**
 * POOT
 * The Zebro Project
 * Delft University of Technology
 * 2016
 *
 * Filename: peak.c
 *
 * Description:
 * Detect the peaks in the data send from the hall sensors
 *
 * Authors:
 * Piet De Vaere -- Piet@DeVae.re
 */

/*
 * IMPORTANT:
 * This file assumes that 7 magnets will cause a downward peak, and one an
 * upward peak.
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
//#include <string.h>

#include "peak.h"
#include "adc.h"
#include "time.h"
#include "position.h"
#include "vregs.h"
#include "motion.h"
#include "optmed.h"
#include "globals.h"

//static int32_t equilibrium[PEAK_NUM_OF_SENSORS] = { PEAK_DEFAULT_EQUILIBRIUM,
//PEAK_DEFAULT_EQUILIBRIUM,
//PEAK_DEFAULT_EQUILIBRIUM };
//static int32_t state[PEAK_NUM_OF_SENSORS] = { PEAK_STATE_IDLE, PEAK_STATE_IDLE,
//PEAK_STATE_IDLE };
//static int32_t min_or_max[PEAK_NUM_OF_SENSORS] = { 0, 0, 0 };

//static uint8_t peak_debug_counter = 0;
//static uint8_t positive_peak_debug_counter = 0;

static int8_t peak_detected[PEAK_NUM_OF_SENSORS];

/**
 * Process ADC data for a single hall sensor
 */
uint8_t peak_process_adc_values_sensor(void) {
	int32_t adc_data;
	static int32_t filteredHistory[PEAK_NUM_OF_SENSORS][PEAK_HISTORY_LAG];
	static int32_t avgHistory[PEAK_NUM_OF_SENSORS][2];
	static int32_t sdHistory[PEAK_NUM_OF_SENSORS][2];
	uint8_t sensor;
	uint8_t threshold = 4; // 4 standard deviations for signal
	uint8_t influence = 3;

	for (sensor = 0; sensor < PEAK_NUM_OF_SENSORS; sensor++) {
		/* sanity check */
		if (sensor < 0 || sensor > PEAK_NUM_OF_SENSORS) {
			return PEAK_ERROR;
		}

		/* get the latest ADC value */
		adc_data = adc_get_value(peak_get_adc_channel_index(sensor));

		if (abs(adc_data - avgHistory[sensor][0])
				> (threshold * sdHistory[sensor][0])) {

			if (adc_data > avgHistory[sensor][0]) {
				peak_detected[sensor] = 1;
			} else {
				peak_detected[sensor] = -1;
			}

			move_over_array_elements(filteredHistory[sensor], PEAK_HISTORY_LAG);

			filteredHistory[sensor][PEAK_HISTORY_LAG - 1] = (influence
					* adc_data)
					+ ((1 - influence)
							* filteredHistory[sensor][PEAK_HISTORY_LAG - 2]); //Divide sum to get average. We lose some accuracy, but this is no problem.
			avgHistory[sensor][0] = avgHistory[sensor][1];
			avgHistory[sensor][1] = mean(filteredHistory[sensor], PEAK_HISTORY_LAG); //Divide sum to get average. We lose some accuracy, but this is no problem.
			sdHistory[sensor][0] = sdHistory[sensor][1];
			sdHistory[sensor][1] = std_var_stable(filteredHistory[sensor], PEAK_HISTORY_LAG);
		} else {
			peak_detected[sensor] = 0;
			peak_detected[sensor] = 0;

			move_over_array_elements(filteredHistory[sensor], PEAK_HISTORY_LAG);

			filteredHistory[sensor][PEAK_HISTORY_LAG - 1] = adc_data;
			avgHistory[sensor][0] = avgHistory[sensor][1];
			avgHistory[sensor][1] = mean(filteredHistory[sensor], PEAK_HISTORY_LAG);
			sdHistory[sensor][0] = sdHistory[sensor][1];
			sdHistory[sensor][1] = std_var_stable(filteredHistory[sensor], PEAK_HISTORY_LAG);
		}
#ifdef DEBUG_VREGS
		vregs_write((VREGS_PEAK_1_ADC_AVERAGE + sensor), avgHistory[sensor][1]);
#endif
	}
	vregs_write(VREGS_DEBUG_FLAG_2+sensor, (uint8_t) (peak_detected));
	return 0;
}

// Move all elements of an array one to the left
void move_over_array_elements(int32_t *array, uint8_t array_size) {
	uint8_t i;
	for (i = 0; i < ((sizeof(array)/sizeof(int32_t)) - 1); i++) {
		array[i] = array[i + 1];
	}
}

int32_t mean(int32_t *array, uint8_t array_size) {
	uint8_t i=0;
	int32_t sum = 0;
	int32_t average;
	for (i = 0; i < array_size; i++) {
		sum += array[i];
	}
	average = sum >> NUM_OF_SHIFTS; //Divide sum to get average. We lose some accuracy, but this is no problem.
	return average;
}

uint32_t std_var_stable(int32_t *a, uint32_t n) {
	if (n == 0)
		return 0;
	unsigned i;
	int32_t mean = 0;
	int32_t M2 = 0;
	for (i = 0; i < n; ++i) {
		int32_t delta = a[i] - mean;
		mean += delta / (i + 1);
		M2 += delta * (a[i] - mean);
	}
	return M2 >> NUM_OF_SHIFTS;
}

/**
 * Translate a sensor number to an ADC index number
 */
uint8_t peak_get_adc_channel_index(uint8_t sensor) {
	switch (sensor) {
	case 0:
		return ADC_HAL_1_INDEX;
		break;

	case 1:
		return ADC_HAL_2_INDEX;
		break;

	case 2:
		return ADC_HAL_3_INDEX;
		break;

	default:
		return PEAK_ERROR;
	}
}

uint8_t get_peak_detected(uint8_t sensor) {
	return peak_detected[sensor];
}

///**
// * Write out some debug info to the vregs
// */
//int8_t peak_write_debug_info(void) {
//	vregs_write(VREGS_PEAK_1_STATE, state[0]);
//	vregs_write(VREGS_PEAK_2_STATE, state[1]);
//	vregs_write(VREGS_PEAK_3_STATE, state[2]);
//	vregs_write(VREGS_PEAK_1_MIN_MAX, min_or_max[0] >> 4);
//	vregs_write(VREGS_PEAK_2_MIN_MAX, min_or_max[1] >> 4);
//	vregs_write(VREGS_PEAK_3_MIN_MAX, min_or_max[2] >> 4);
//	vregs_write(VREGS_PEAK_1_EQUILIBRIUM, equilibrium[0] >> 4);
//	vregs_write(VREGS_PEAK_2_EQUILIBRIUM, equilibrium[1] >> 4);
//	vregs_write(VREGS_PEAK_3_EQUILIBRIUM, equilibrium[2] >> 4);
//	return 0;
//}

///**
// * Get the median of the last samples of the hall sensors.
// */
//int32_t peak_get_median_value(uint8_t sensor, int32_t adc_data) {
//	static int32_t history[PEAK_NUM_OF_SENSORS][PEAK_MEDIAN_HISTORY_SIZE];
//	int32_t *history_copy[PEAK_NUM_OF_SENSORS][PEAK_MEDIAN_HISTORY_SIZE];
//	static int cursor = 0;
//	int32_t median = 0;
//	int i = 0;
//
//	history[sensor][cursor] = adc_data; //Acquire history data
//	for (i = 0; i < PEAK_MEDIAN_HISTORY_SIZE; i++) {
//		// Copy history data to be sorted by median algorithm.
//		history_copy[sensor][i] = &history[sensor][i];
//	}
//
//	vregs_write((VREGS_DEBUG_FLAG_4), (*history_copy[0][0] >> 4));
//	vregs_write((VREGS_DEBUG_FLAG_5), (*history_copy[0][1] >> 4));
//	vregs_write((VREGS_DEBUG_FLAG_6), (*history_copy[0][2] >> 4));
//
//	// Make history a FIFO buffer.)
//	cursor++;
//	if (cursor >= PEAK_MEDIAN_HISTORY_SIZE) {
//		cursor = 0;
//	}
//
//	// Calculate the median according to history size.
//	switch (PEAK_MEDIAN_HISTORY_SIZE) {
//	case 3:
//		median = opt_med3(history_copy[sensor][0]);
//		break;
//	case 5:
//		median = opt_med5(history_copy[sensor][0]);
//		break;
//	case 6:
//		median = opt_med6(history_copy[sensor][0]);
//		break;
//	case 7:
//		median = opt_med7(history_copy[sensor][0]);
//		break;
//	case 9:
//		median = opt_med9(history_copy[sensor][0]);
//		break;
//	case 25:
//		median = opt_med25(history_copy[sensor][0]);
//		break;
//	default:
//		median = 1; //Happens only when an incorrect PEAK_MEDIAN_HISTORY_SIZE is given and we want people to notice.
//		break;
//	}
//	return median;
//}

///**
// * Process ADC data for all hall sensors
// */
//int32_t peak_process_adc_values(void) {
//	int32_t sensor;
//	int32_t adc_data;
//
//	for (sensor = 0; sensor < PEAK_NUM_OF_SENSORS; sensor++) {
//		/* sanity check */
//		if (sensor < 0 || sensor > PEAK_NUM_OF_SENSORS)
//			return PEAK_ERROR;
//
//		/* get the latest ADC value */
//		adc_data = adc_get_value(sensor);
//		adc_data = peak_get_median_value(sensor, adc_data);
//
//		switch (state[sensor]) {
//
//		case PEAK_STATE_IDLE:
//			/* store the minimum */
//			min_or_max[sensor] = adc_data;
//			/* make a guess, you have a 50-50 chance of being right */
//			state[sensor] = PEAK_STATE_RISING;
//			break;
//
//		case PEAK_STATE_RISING:
//			peak_update_maximum(sensor, adc_data);
//
//			/* if we detect that we changed to a falling edge */
//			if (peak_check_for_direction_change(sensor, adc_data)) {
//				peak_check_for_equilibrium_change(sensor);
//
//				/* if this peak is an actual peak, and not just a direction
//				 * change between two peaks. */
//				if (peak_check_for_valid_peak(sensor)) {
//					peak_debug_counter += 1;
//					positive_peak_debug_counter += 1;
//					if (sensor == 2) {
//						if (calibration_peak_detected < 255) {
//							calibration_peak_detected += 1;
//						} else {
//							calibration_peak_detected = 255;
//						}
//					}
//					position_peak_detected(sensor, PEAK_INDEX_PEAK_DETECTED);
//				}
//				state[sensor] = PEAK_STATE_FALLING;
//				min_or_max[sensor] = adc_data;
//			}
//			break;
//
//		case PEAK_STATE_FALLING:
//			peak_update_minimum(sensor, adc_data);
//
//			/* if we detected that we changed to a rising edge */
//			if (peak_check_for_direction_change(sensor, adc_data)) {
//
//				/* if this peak is an actual peak, and not just a direction
//				 * change between two peaks. */
//				if (peak_check_for_valid_peak(sensor)) {
//					peak_debug_counter += 1;
//					if (sensor == 2) {
//						if (calibration_peak_detected < 255) {
//							calibration_peak_detected += 1;
//						} else {
//							calibration_peak_detected = 255;
//						}
//					}
//					position_peak_detected(sensor, PEAK_NORMAL_PEAK_DETECTED);
//				}
//				state[sensor] = PEAK_STATE_RISING;
//				min_or_max[sensor] = adc_data;
//			}
//			break;
//
//		default:
//			state[sensor] = PEAK_STATE_IDLE;
//			return PEAK_ERROR;
//		}
//
//		vregs_write(VREGS_PEAK_DEBUG_CNT, peak_debug_counter);
//		vregs_write(VREGS_PEAK_POS_DEBUG_CNT, positive_peak_debug_counter);
//		vregs_write(VREGS_DEBUG_FLAG_2, (uint8_t) (calibration_peak_detected));
//	}
//
//	return 0;
//}

/*
 * Check if a peak is an actual valid peak, and not just a direction change
 * between two peak in.
 *
 *                           An actual peak
 *                                 |
 *
 *                                 *
 *          Not an actual peak    * *     Not an actual peak
 *                  |            *   *            |
 *                              *     *
 * *******         ***         *       *         ***       **************
 *        *       *   *       *         *       *   *     *
 * 	       *     *     *     *           *     *     *   *
 * 	        *   *       *   *             *   *       * *
 * 	         * *         * *               * *         *
 * 	   	      *           *                 *
 *                                                     |
 *            |                             |    An actual peak
 *      An actual peak                An actual peak
 *
 * We do this check by seeing if the peak is far enough from
 * the equilibrium state of the hall sensors.
 *
 */
//int32_t peak_check_for_valid_peak(uint8_t sensor) {
//	if (min_or_max[sensor] > (equilibrium[sensor] + PEAK_MINIMUM_PEAK_HEIGHT))
//		return 1;
//	if (min_or_max[sensor] < (equilibrium[sensor] - PEAK_MINIMUM_PEAK_HEIGHT))
//		return 1;
//	return 0;
//}
/**
 * Check if the equilibrium should be updated
 */
//int32_t peak_check_for_equilibrium_change(uint8_t sensor) {
//	static int32_t history[PEAK_NUM_OF_SENSORS][PEAK_EQUILIBRIUM_HISTORY_SIZE] =
//			{ { PEAK_DEFAULT_EQUILIBRIUM, PEAK_DEFAULT_EQUILIBRIUM,
//			PEAK_DEFAULT_EQUILIBRIUM }, { PEAK_DEFAULT_EQUILIBRIUM,
//			PEAK_DEFAULT_EQUILIBRIUM,
//			PEAK_DEFAULT_EQUILIBRIUM }, { PEAK_DEFAULT_EQUILIBRIUM,
//			PEAK_DEFAULT_EQUILIBRIUM,
//			PEAK_DEFAULT_EQUILIBRIUM } };
//	static int32_t insert_point[PEAK_NUM_OF_SENSORS] = { 0, 0, 0 };
//	int32_t cursor, sum, new_equilibrium_found;
//
//	history[sensor][insert_point[sensor]] = min_or_max[sensor];
//	insert_point[sensor] = (insert_point[sensor] + 1)
//			% PEAK_EQUILIBRIUM_HISTORY_SIZE;
//
//	sum = history[sensor][0];
//	new_equilibrium_found = 1;
//	for (cursor = 1; cursor < PEAK_EQUILIBRIUM_HISTORY_SIZE; cursor++) {
//		int32_t delta;
//
//		sum += history[sensor][cursor];
//
//		delta = history[sensor][cursor - 1] - history[sensor][cursor];
//		if (delta < 0)
//			delta = -delta;
//		if (delta > PEAK_MAX_HISTORY_DIFF) {
//			new_equilibrium_found = 0;
//			break;
//		}
//	}
//
//	if (new_equilibrium_found) {
//		equilibrium[sensor] = sum / PEAK_EQUILIBRIUM_HISTORY_SIZE;
//	}
//
//	vregs_write(VREGS_PEAK_1_HISTORY_1, history[0][0] >> 4);
//	vregs_write(VREGS_PEAK_1_HISTORY_2, history[0][1] >> 4);
//	vregs_write(VREGS_PEAK_1_HISTORY_3, history[0][2] >> 4);
//	vregs_write(VREGS_PEAK_1_HISTORY_4, history[0][3] >> 4);
//
//	return 0;
//}
/**
 * Check if we changed from rising to falling versions or vice versa
 */
//int32_t peak_check_for_direction_change(uint8_t sensor, int32_t adc_data) {
//
//	/* if we are currently rising */
//	if (state[sensor] == PEAK_STATE_RISING) {
//		int32_t change_threshold = min_or_max[sensor]
//				- PEAK_STATE_CHANGE_HYSTERESIS;
//
//		if (adc_data < change_threshold) {
//			return 1;
//		}
//
//		return 0;
//	}
//
//	/* if we are currently falling */
//	if (state[sensor] == PEAK_STATE_FALLING) {
//		int32_t change_threshold = min_or_max[sensor]
//				+ PEAK_STATE_CHANGE_HYSTERESIS;
//
//		if (adc_data > change_threshold) {
//			return 1;
//		}
//
//		return 0;
//	}
//
//	return PEAK_ERROR;
//}
//
///**
// * Update the maximum stored for this sensor
// */
//int32_t peak_update_maximum(uint8_t sensor, int32_t adc_data) {
//	if (adc_data > min_or_max[sensor]) {
//		min_or_max[sensor] = adc_data;
//	}
//
//	return 0;
//}
//
///**
// * Update the minimum stored for this sensor
// */
//int32_t peak_update_minimum(uint8_t sensor, int32_t adc_data) {
//	if (adc_data < min_or_max[sensor]) {
//		min_or_max[sensor] = adc_data;
//	}
//
//	return 0;
//}
