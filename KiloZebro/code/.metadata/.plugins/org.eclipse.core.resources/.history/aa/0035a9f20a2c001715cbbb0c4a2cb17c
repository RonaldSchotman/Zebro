/**
 * POOT
 * The Zebro Project
 * Delft University of Technology
 * 2016
 *
 * Filename: motion.c
 *
 * Description:
 * Motion controller. Keeps track of the current walking
 * mode or assignment, and decides how to actuate the
 * H-bridge.
 * *
 * Authors:
 * Daniel Booms -- d.booms@solcon.nl
 * Piet De Vaere -- Piet@DeVae.re
 *
 * Last edited:
 * 06-03-2017		Floris Rouwen		florisrouwen@outlook.com
 */

#include "stm32f0xx_hal.h"
#include "stdint.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "motion.h"
#include "vregs.h"
#include "h_bridge.h"
#include "address.h"
#include "time.h"
#include "encoder.h"
#include "peak.h"
#include "adc.h"
#include "errors.h"
#include "interrupts.h"
#include "globals.h"

static struct motion_state state = { 0, 0, 0, 0, 0, 0, 0 };
static struct motion_state new_state = { 0, 0, 0, 0, 0, 0, 0 };
static uint32_t std_var; /* standard deviation of the hall-sensor with a peak at hall-sensor 3. */
uint16_t position_touch_down = 0;
uint8_t calibrate = 1; /* When Zebro is turned on, calibrate should first be on. */
static int16_t last_known_position = 0;
//static uint8_t kp = 120, ki = 150, kd = 30;
/* half pid values are also nice, but a bit slower. */
static uint8_t kp = 240, ki = 30, kd = 50;
/* current setpoint. This is a setpoint between -2^15 and 2^15 */
static int32_t current_setpoint;
static int16_t position_setpoint;
static int16_t absolute_position;
static int16_t previous_encoder_position;

/**
 * Process data send to any of the addresses in the motion control range.
 */
int32_t motion_new_zebrobus_data(uint32_t address, uint8_t data) {

	switch (address) {

	/* set mode */
	case VREGS_MOTION_MODE:
		new_state.mode = data;
		break;

	case VREGS_MOTION_POSITION_A:
		new_state.position_a = data;
		break;

	case VREGS_MOTION_POSITION_B:
		new_state.position_b = data;
		break;

	case VREGS_MOTION_TIME_A:
		new_state.time_a = data;
		break;

	case VREGS_MOTION_TIME_B:
		new_state.time_b = data;
		break;

	case VREGS_MOTION_NEW_DATA_FLAG:
		new_state.new_data_flag = data;
		break;

		/* set crc */
	case VREGS_MOTION_CRC:
		new_state.crc = data;
		break;

		/* check if the new command is sane, and if it is, activate it.
		 * Reset the 'new_state' struct in either case
		 */
	case VREGS_MOTION_UPDATE:
		if (!motion_validate_state(new_state)
				&& ((calibrate == 0) || (new_state.mode == 0) /* idle state should always be reached */
				|| (new_state.mode == 1) /* we should always be able to go to calibration state if necessary */
				|| (new_state.mode == 255))) { /* panic state should of course always be reachable */
			state = new_state;
			motion_write_state_to_vregs(state);
		}
		new_state.mode = 0;
		new_state.position_a = 0;
		new_state.position_b = 0;
		new_state.time_a = 0;
		new_state.time_b = 0;
		new_state.new_data_flag = 0;
		new_state.crc = 0;
		break;

	default:
		break;

	}
	return 0;
}

/**
 * Write the values of the given state to the vregs
 */
int32_t motion_write_state_to_vregs(struct motion_state motion_state) {
	vregs_write(VREGS_MOTION_MODE, motion_state.mode);
	vregs_write(VREGS_MOTION_POSITION_A, (uint8_t) (motion_state.position_a));
	vregs_write(VREGS_MOTION_POSITION_B, motion_state.position_b);
	vregs_write(VREGS_MOTION_TIME_A, motion_state.time_a);
	vregs_write(VREGS_MOTION_TIME_B, motion_state.time_b);
	vregs_write(VREGS_MOTION_NEW_DATA_FLAG, motion_state.new_data_flag);
	vregs_write(VREGS_MOTION_CRC, motion_state.crc);
	return 0;
}

/**
 * Stub for the state validator.
 * return zero is state is OK.
 */
int32_t motion_validate_state(struct motion_state motion_state) {
	return 0;
}

/**
 * This function controls the position with PID control. It uses the variable
 * position_setpoint as input and outputs a current_setpoint that goes into the
 * current control loop.
 */

void motion_control_position(void) {
	static uint8_t counter = 0;
	static uint16_t dt, time_prev;
	static int16_t error_position, error_position_prev;
	static int32_t error_integral, error_derivative;

	dt = time17_get_time() - time_prev; /* overflow is taken care of by uint16_t and ARR = 0xFFFF. dt is typically */
	time_prev = time17_get_time();
	error_position = position_setpoint - encoder_get_position(); /* there are 910 pulses in one circle, the error will typically be 1/14th of that is our guess = 65 ticks*/
	error_integral += (dt * error_position) / (48000000 >> 15);
	if (counter == 10) {
		error_derivative = ((error_position - error_position_prev)); /* to little accuracy on the encoder for real d. The max value is 2 or 3. */
		error_position_prev = error_position;
		counter = 0;
	} else {
		counter++;
	}
	/* current setpoint. This is a setpoint between -2^15 and 2^15 */
	current_setpoint = ((kp * error_position) + (ki * (error_integral >> 13))
			+ (kd * 40 * error_derivative));

	/* max current_setpoint is INT16_MAX*/
	if (current_setpoint > MOTION_CURRENT_SETPOINT_MAX) {
		current_setpoint = MOTION_CURRENT_SETPOINT_MAX;
		if (((kp * error_position)) < MOTION_CURRENT_SETPOINT_MAX) {
			error_integral = ((((MOTION_CURRENT_SETPOINT_MAX)
					- (kp * error_position)) / ki) << 13);
		} else {
			error_integral = 0;
		}
	} else if (current_setpoint < MOTION_CURRENT_SETPOINT_MIN) {
		current_setpoint = MOTION_CURRENT_SETPOINT_MIN;
		if (((kp * error_position)) > (MOTION_CURRENT_SETPOINT_MIN)) {
			error_integral = ((((MOTION_CURRENT_SETPOINT_MIN)
					- (kp * error_position)) / ki) << 13);
		} else {
			error_integral = 0;
		}
	}

#ifdef DEBUG_VREGS
	vregs_write(VREGS_POSITION_CONTROL_KP, motion_position_control_get_kp());
	vregs_write(VREGS_POSITION_CONTROL_KI, motion_position_control_get_ki());
	vregs_write(VREGS_POSITION_CONTROL_KD, motion_position_control_get_kd());
	if (error_position > 0) {
		vregs_write(VREGS_POSITION_CONTROL_E_POS, (uint8_t) (error_position));
		vregs_write(VREGS_POSITION_CONTROL_E_NEG, (uint8_t) (0));
	} else {
		vregs_write(VREGS_POSITION_CONTROL_E_NEG,
				(uint8_t) (abs(error_position)));
		vregs_write(VREGS_POSITION_CONTROL_E_POS, (uint8_t) (0));
	}
	if (error_integral > 0) {
		vregs_write(VREGS_POSITION_CONTROL_EI_POS,
				(uint8_t) (error_integral >> 15));
		vregs_write(VREGS_POSITION_CONTROL_EI_NEG, (uint8_t) (0));
	} else {
		vregs_write(VREGS_POSITION_CONTROL_EI_NEG,
				(uint8_t) ((abs(error_integral)) >> 15));
		vregs_write(VREGS_POSITION_CONTROL_EI_POS, (uint8_t) (0));
	}
	if (error_derivative > 0) {
		vregs_write(VREGS_POSITION_CONTROL_ED_POS,
				(uint8_t) (error_derivative));
		vregs_write(VREGS_POSITION_CONTROL_ED_NEG, (uint8_t) (0));
	} else {
		vregs_write(VREGS_POSITION_CONTROL_ED_NEG,
				(uint8_t) (abs(error_derivative)));
		vregs_write(VREGS_POSITION_CONTROL_ED_POS, (uint8_t) (0));
	}
	vregs_write(VREGS_POSITION_CONTROL_DT, (uint8_t) (dt / 48));
	vregs_write(VREGS_POSITION_MEASURED, (uint8_t) (encoder_get_position()));
#endif
}

/**
 * Set the proportional gain of the position control loop. This function is necessary so
 * one can tune the PID controller via input over ZebroBus.
 */
void motion_position_control_set_kp(uint8_t value) {
	kp = value;
	return;
}

/**
 * Set the integral gain of the position control loop. This function is necessary so
 * one can tune the PID controller via input over ZebroBus.
 */
void motion_position_control_set_ki(uint8_t value) {
	ki = value;
	return;
}

/**
 * Set the derivative gain of the position control loop. This function is necessary so
 * one can tune the PID controller via input over ZebroBus.
 */
void motion_position_control_set_kd(uint8_t value) {
	kd = value;
	return;
}

/**
 * Return the proportional gain value of the position PID controller.
 */
uint8_t motion_position_control_get_kp(void) {
	return kp;
}

/**
 * Return the integral gain value of the position PID controller.
 */
uint8_t motion_position_control_get_ki(void) {
	return ki;
}

/**
 * Return the derivative gain value of the position PID controller.
 */
uint8_t motion_position_control_get_kd(void) {
	return kd;
}

/**
 * This function keeps track of the absolute position of the leg at any time.
 * It checks if the encoder has incremented one down or up and adjusts its
 * state to it. This way it is possible to always check where the leg is in the circle.
 */
void motion_absolute_position_calculator(void) {
	int16_t current_position = encoder_get_position();
	int16_t delta = current_position - previous_encoder_position;
	absolute_position = absolute_position + delta;
	if (absolute_position < 0) {
		absolute_position = ENCODER_PULSES_PER_ROTATION + absolute_position;
	}
	absolute_position = absolute_position % ENCODER_PULSES_PER_ROTATION;
	previous_encoder_position = current_position;

#ifdef DEBUG_VREGS
	vregs_write(VREGS_POSITION_ABSOLUTE_A, (uint8_t) (absolute_position >> 8));
	vregs_write(VREGS_POSITION_ABSOLUTE_B, (uint8_t) absolute_position);
#endif
}

/**
 * Reset the absolute position calculator.
 */
void motion_reset_absolute_position_calculator(void) {
	absolute_position = 0;
	previous_encoder_position = 0;
	return;
}

/**
 * Look at the drive command, the position data, and the time.
 * Use this data to choose how to actuate the h_bridge.
 *
 * Info:
 * Left leg : get_address_side = 0; walking forward = counterclockwise = h_bridge_drive(x, 0, x) : encoder_dir = 1 : encoder = counting down.
 *
 * The finite state machine toggled by fsm_flag is as follows. For each number of fsm_flag=
 * 		0: Idle state. Nothing should happen. We should always return to this state. Turn on the correct ADC channels
 * 		1: Rotate the leg backwards until it touches the ground.
 * 		2: Rotate the leg forward and collect hall-sensor samples. Store these in an array.
 * 		3: Reset the peak_detected array.
 * 		4: Rotate the leg backward until the 3rd hall-sensor is triggers and set the encoder value to zero at that point.
 * 		5: Calibration completed, set the correct ADC channels.
 */
int32_t motion_command_zebro() {
	int32_t return_value = 0;
	static uint16_t adc_data[ARRAY_SIZE];
	static uint8_t fsm_flag = 0;
	static uint16_t counter = 0;
	static int16_t previous_setpoint;
	static uint32_t delta_distance = 0;
	static uint32_t desired_speed;
	static int16_t absolute_starting_setpoint = 0;
	static int16_t absolute_ending_setpoint = 0;
	static uint32_t delta_time = 0;
	static uint32_t starting_time = 0;
	static uint32_t time_old;
	static uint32_t time_old_1;
	/* dt indicates time between entering a subfunction and is used in calibration */
	uint32_t dt = (TIM16->CNT) - time_old;
	uint32_t dt_1 = (TIM16->CNT) - time_old_1;
	static uint32_t time_until_next_position_setpoint;

#ifdef DEBUG_VREGS
	vregs_write(VREGS_PEAK_ADC_SD_A, (uint8_t) get_std_var());
	vregs_write(VREGS_PEAK_ADC_SD_B, (uint8_t) (get_std_var() >> 8));
	vregs_write(VREGS_MOTION_FSM_FLAG, (uint8_t) fsm_flag);
	vregs_write(VREGS_DEBUG_FLAG_1, (uint8_t) calibrate);
	vregs_write(VREGS_DEBUG_FLAG_2, (uint8_t) (ADC1->CR & ADC_CR_ADSTART));
	vregs_write(VREGS_MOTION_LAST_KNOWN_POSITION_A,
			(uint8_t) (last_known_position >> 8));
	vregs_write(VREGS_MOTION_LAST_KNOWN_POSITION_B,
			(uint8_t) (last_known_position));
//	vregs_write(VREGS_MOTION_CONSTANT_SPEED, (uint8_t) (constant_speed >> 3));
//	vregs_write(VREGS_MOTION_POSITION_RAMP_LENGTH,
//			(uint8_t) (position_ramp_length));
	vregs_write(VREGS_MOTION_POSITION_SETPOINT_A,
			(uint8_t) (position_setpoint >> 8));
	vregs_write(VREGS_MOTION_POSITION_SETPOINT_B,
			(uint8_t) (position_setpoint));
//	vregs_write(VREGS_POSITION_DISTANCE_MOVE_A, (uint8_t) (distance_move >> 8));
//	vregs_write(VREGS_POSITION_DISTANCE_MOVE_B, (uint8_t) (distance_move));
#endif

	switch (state.mode) {

	case MOTION_MODE_IDLE:
		/* Function stabilizes the leg on the position_setpoint*/
		motion_control_position();
		fsm_flag = 0;
		return 0;

	case MOTION_MODE_CALIBRATE:
		/* Function stabilizes the leg on the position_setpoint*/
		motion_control_position();
		/* always remember the last position so when going to idle state, there is no weird position setpoint that
		 * can give nasty results.
		 */
		last_known_position = encoder_get_position();
		/*
		 * We set the calibrate bit to 1 to indicate we are calibrating. We also turn on
		 * the ADC reading of all HALL sensors and ID resistor.
		 */
		if (fsm_flag == 0) {
			kp = 240;
			ki = 0;
			kd = 10;
			/* Set calibrate to 1 to enable reading adc-data of the hall-sensors */
			set_calibrate(1);
			/* Set AD_STOP to 1 to stop measuring on the ADC. */
			ADC1->CR |= ADC_CR_ADSTP;
			/* wait for adstart to become 0 */
			while ((ADC1->CR & ADC_CR_ADSTART) != 0) {
				/* do nothing */
			}
			if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
				interrupts_disable();
				/* disable the DMA channel */
				DMA1_Channel1->CCR &= ~DMA_CCR_EN;
				/* Select the channels to convert. */
				ADC1->CHSELR = (1 << ADC_HAL_1_CH) | (1 << ADC_HAL_2_CH)
						| (1 << ADC_HAL_3_CH) | (1 << ADC_ID_RESISTOR_CH)
						| (1 << ADC_BATTERY_CH) | (1 << ADC_MOTOR_CURRENT_CH)
						| (1 << ADC_TEMP_CH);
				/* set size of transfer */
				DMA1_Channel1->CNDTR = ADC_NUM_OF_CHANNELS;
				/* enable the DMA channel */
				DMA1_Channel1->CCR |= DMA_CCR_EN;
				/* Write AD_START to 1 to start conversions. */
				ADC1->CR |= ADC_CR_ADSTART;
				/* Continue to the next FSM state */
				fsm_flag = 1;
				interrupts_enable();
			}
		}

		/* rotate the leg backward by setting the setpoint 1 backwards every 2.5 ms. */
		if (fsm_flag == 1) {
			peak_process_adc_values_sensor(0);
			/* every 2.5 ms = 160 clock ticks*/
			if (dt >= MOTION_CALIB_ROTATE_DT) {
				/* set time_old to the current value of the timer so dt can be calculated for the next entry of this function. */
				time_old = TIM16->CNT;
				position_setpoint -= 1;
			}
			/* check if more than a certain threshold of current is drawn indicating the leg is touching the floor */
			if (adc_get_absolute_current_measured_mA() > MOTION_CALIB_MAX_CURRENT_MA) {
				/* Reset time_old. If too much current is drawn, this statement prevents the position_setpoint from
				 * further incrementing because then dt will never grow larger than the specified 160 ticks.
				 */
				time_old = TIM16->CNT;
				/* if current is too high, increment counter */
				counter += 1;
				/* wait for position to hold for 1000 loops */
				if (counter >= 1000) { /* Loop speed is around 5000 Hz, so 200 ms. */
					counter = 0;
					/* reset the encoder to 0 to indicate the floor as 0 */
					encoder_reset_position();
					/* get and set the new last_known position. */
					last_known_position = encoder_get_position();
					position_setpoint = last_known_position;
					fsm_flag = 2;
				}
			} else {
				/* decrement counter when current is below the threshold. */
				if (counter > 0) {
					counter -= 1;
				}
			}
		}
		/* Rotate the leg forward and collect ADC samples from the 3rd hall sensor. */
		if (fsm_flag == 2) {
			peak_process_adc_values_sensor(1);
			static uint16_t n = 0;
			/* We don't want to sample the hall sensor too often, so every two encoder pulses */
			if ((position_setpoint - previous_setpoint) >= 2) {
				previous_setpoint = position_setpoint;
				/* We're only interested in the value of the 3rd hall sensor */
				adc_data[n] = adc_get_value(ADC_HAL_2_INDEX);
				n = n + 1;
			}
			/* The array may not grow larger than 256 samples */
			if (n >= ARRAY_SIZE) {
				n = ARRAY_SIZE - 1;
			}
			/* Check whether we've already rotated back by 400 encoder pulses. */
			if (position_setpoint >= 400) {
				/* Calculate the standard deviation of the collected samples. */
				std_var = std_var_stable(adc_data, n);
				n = 0;
				/* move to the next fsm phase */
				fsm_flag = 3;
			} else {
				/* Rotate forward every 2.5 ms  = 160 ticks */
				if (dt >= MOTION_CALIB_ROTATE_DT) {
					/* set time_old to the current value of the timer so dt can be calculated for the next entry of this function. */
					time_old = TIM16->CNT;
					position_setpoint += 1;
				}
			}
		}
		if (fsm_flag == 3) {
			/* reset all detected peaks, because now it's calibrated */
			reset_peak_detected();
			/* move to the next phase */
			fsm_flag = 4;
		}
		if (fsm_flag == 4) {
			/* process values from the adc to detect when the leg passes by a hall sensor */
			peak_process_adc_values_sensor(2);
			if (get_peak_detected(MOTION_CALIBRATION_HALL_SENSOR) == 1) {
				/* reset the encoder to 0 to indicate the 3rd hall sensor as the absolute 0 */
				encoder_reset_position();
				/* get and set the new last_known position. */
				last_known_position = encoder_get_position();
				position_setpoint = last_known_position;
				time_old = 0;
				/* go to the next phase */
				fsm_flag = 5;
			} else {
				/* every 2.5 ms  = 320 ticks */
				if ((dt >= MOTION_CALIB_ROTATE_DT)) {
					/* set time_old to the current value of the timer so dt can be calculated for the next entry of this function. */
					time_old = TIM16->CNT;
					position_setpoint -= 1;
				}
			}
		}
		/* wait for adstart to become 0 */
		if (fsm_flag == 5) {
			/* Set AD_STOP to 1 to stop measuring on the ADC. */
			ADC1->CR |= ADC_CR_ADSTP;
			/* wait for adstart to become 0 */
			while ((ADC1->CR & ADC_CR_ADSTART) != 0) {
				/* do nothing */
			}
			/* Set the ADC channels to only battery, motor current and internal temperature.
			 * This makes the motor_current sensing way faster. (1 in 3 instead of 1 in 7)
			 */
			if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
				interrupts_disable();
				/* Disable the DMA channel */
				DMA1_Channel1->CCR &= ~DMA_CCR_EN;
				/* Select the channels to convert. */
				ADC1->CHSELR = (1 << ADC_BATTERY_CH)
						| (1 << ADC_MOTOR_CURRENT_CH) | (1 << ADC_TEMP_CH);
				/* set size of transfer */
				DMA1_Channel1->CNDTR = ADC_NUM_OF_CHANNELS - 4;
				/* enable the DMA channel */
				DMA1_Channel1->CCR |= DMA_CCR_EN;
				/* Write AD_START to 1 to start conversions. */
				ADC1->CR |= ADC_CR_ADSTART;
				/* set the calibration bit to 0 to indicate we are done with calibration */
				set_calibrate(0);
				kp = 240;
				ki = 30;
				kd = 50;
				/* return to the idle state */
				motion_return_to_idle();
				interrupts_enable();
			}
		}
		break;

		/* it is assumed that if we move to lift off, we will also always move to touch down. After that, we'll see what we'll do. */
	case MOTION_MODE_WALK_FORWARD:
		motion_control_position();
		time_old = TIM16->CNT;
		absolute_starting_setpoint = absolute_position;
		starting_time = time_get_time_ms();
		absolute_ending_setpoint = ((state.position_a << 8) + state.position_b);
		if (absolute_starting_setpoint > absolute_ending_setpoint) {
			delta_distance =
			ENCODER_PULSES_PER_ROTATION
					- (absolute_starting_setpoint - absolute_ending_setpoint);
		} else if (absolute_starting_setpoint == absolute_ending_setpoint) {
			motion_return_to_idle();
		} else {
			delta_distance = absolute_ending_setpoint
					- absolute_starting_setpoint;
		}
		delta_time = ((state.time_a * 1000) + (state.time_b * 4))
				- starting_time;
		if (delta_time > 0) {
			desired_speed = (delta_distance * 1000000) / delta_time; /* kilo-pulses per second */
		}
		if (dt_1 >= time_until_next_position_setpoint) {
			position_setpoint += 1;
			if (position_setpoint > (encoder_get_position() + delta_distance)) {
				position_setpoint = (encoder_get_position() + delta_distance);
			}

			if (desired_speed > 0) {
				time_until_next_position_setpoint = (1000
						* TIME_ONE_SECOND_COUNTER_VALUE) / desired_speed;
				time_old_1 = (TIM16->CNT);
			}
		}

//		if (fsm_flag == 0) {
//			starting_setpoint = encoder_get_position();
//			absolute_starting_setpoint = absolute_position;
//			absolute_ending_setpoint = ((state.position_a << 8)
//					+ state.position_b);
//			starting_time = time_get_time_ms();
//			if (absolute_starting_setpoint >= absolute_ending_setpoint) {
//				distance_move =
//						ENCODER_PULSES_PER_ROTATION
//								- (absolute_starting_setpoint
//										- absolute_ending_setpoint);
//			} else {
//				distance_move = absolute_ending_setpoint
//						- absolute_starting_setpoint;
//			}
//			t_move_total = ((state.time_a * 1000) + (state.time_b * 4))
//					- starting_time;
//			t_ad = MOTION_ACC_DEC_TIME_MS;
//			fsm_flag = 6;
//		}
//		if (fsm_flag == 6) {
//			t = time_calculate_delta(time_get_time_ms(), starting_time);
//			if (t <= t_ad) {
//				position_setpoint = (starting_setpoint
//						+ ((distance_move * t * t)
//								/ (2 * t_ad * (t_move_total - t_ad))));
//			}
//
//			if ((t > t_ad) && (t <= (t_move_total - t_ad))) {
//				position_setpoint = (starting_setpoint
//						+ (((distance_move * t) / (t_move_total - t_ad))
//								- ((distance_move * t_ad)
//										/ (2 * (t_move_total - t_ad)))));
//			}
//
//			if ((t > (t_move_total - t_ad)) && (t <= t_move_total)) {
//				position_setpoint = (starting_setpoint
//						+ (distance_move
//								- ((distance_move
//										* ((t_move_total - t)
//												* (t_move_total - t)))
//										/ (2 * t_ad * (t_move_total - t_ad)))));
//			}
//			if (t > t_move_total) {
//				motion_return_to_idle();
//			}
//		}
		break;

	case MOTION_MODE_WALK_BACKWARD:

		break;

	case MOTION_MODE_EMERGENCY_STOP:
		errors_emergency_stop();
		fsm_flag = 0;
		break;

	default:
		motion_return_to_idle();
		return_value = 255;
	}
	motion_write_state_to_vregs(state);
	return return_value;
}

uint32_t calculate_current_speed(void) {
	static int16_t encoder_position_old = 0;
	static uint16_t time_old = 0;
	static uint32_t current_speed = 0;

	int16_t delta_distance = encoder_get_position() - encoder_position_old;
	uint16_t delta_time = TIM6->CNT - time_old; /* TIM6 runs at 64000 ticks/sec */
	/* assuming the speed is never SLOWER than around 1 pulse per second. This way the current_speed is never calculated to be too high, only sometimes too low. */
	if ((delta_distance != 0) || (delta_time >= 63000)) {
		encoder_position_old = encoder_get_position();
		time_old = TIM6->CNT;
		current_speed = (delta_distance * 64000000) / delta_time; /* kilo-pulses per second */
	}
	return current_speed;
}

/* Set the setpoint for current */
void set_current_setpoint(int32_t value) {
	current_setpoint = value;
}

/* Get the setpoint for current */
int32_t get_current_setpoint(void) {
	if (current_setpoint >= INT16_MAX) {
		current_setpoint = INT16_MAX;
	}
	if (current_setpoint <= INT16_MIN) {
		current_setpoint = INT16_MIN;
	}
	return current_setpoint;
}

uint8_t get_state_mode(void) {
	return state.mode;
}

void set_state_mode(uint8_t mode) {
	state.mode = mode;
	return;
}

/* Return standard deviation */
uint32_t get_std_var(void) {
	return std_var;
}

/* Calculate the standard deviation from a vector with length n. Copied from somewhere. */
uint32_t std_var_stable(uint16_t *a, uint16_t n) {
	if (n == 0) {
		return 0;
	}
	/* we need ridiciously large ints */
	uint64_t sum = 0;
	uint64_t sq_sum = 0;
	unsigned i = 0;
	for (i = 0; i < n; ++i) {
		uint16_t ai = a[i];
		sum += ai;
		sq_sum += ai * ai;
	}
	uint64_t N = n;
	uint64_t std_var = (N * sq_sum - sum * sum) / (N * N);
	std_var = (uint32_t) isqrt(std_var);
	return std_var;
}

/* Take the square root of x and round to the nearest integer. Copied from somewhere. */
uint64_t isqrt(uint64_t x) {
	uint64_t op, res, one;

	op = x;
	res = 0;

	/* "one" starts at the highest power of four <= than the argument. */
	one = 1 << 30; /* second-to-top bit set */
	while (one > op)
		one >>= 2;

	while (one != 0) {
		if (op >= res + one) {
			op -= res + one;
			res += one << 1; /* <-- faster than 2 * one */
		}
		res >>= 1;
		one >>= 2;
	}

	/* Do arithmetic rounding to nearest integer */
	if (op > res) {
		res++;
	}

	return res;
}

/**
 * This is hard set of the motion state
 */
void motion_set_state(uint8_t mode, uint8_t lift_off_time_a,
		uint8_t lift_off_time_b, uint8_t touch_down_time_a,
		uint8_t touch_down_time_b, uint8_t new_data_flag, uint8_t crc) {
	state.mode = mode;
	state.position_a = lift_off_time_a;
	state.position_b = lift_off_time_b;
	state.time_a = touch_down_time_a;
	state.time_b = touch_down_time_b;
	state.new_data_flag = new_data_flag;
	state.crc = crc;
	motion_write_state_to_vregs(state);
}

/**
 * Clear the current motion command, and return to idle
 */
int32_t motion_return_to_idle(void) {
	state.mode = 0;
	state.position_a = 0;
	state.position_b = 0;
	state.time_a = 0;
	state.time_b = 0;
	state.new_data_flag = 0;
	state.crc = 0;
	motion_write_state_to_vregs(state);
	/* check the current position and save and set it as the last known position */
	last_known_position = encoder_get_position();
	position_setpoint = last_known_position;
	return 0;
}

/**
 * Clear the current motion command, and go to emergency stop
 */
int32_t motion_emergency_stop(void) {
	state.mode = 255;
	state.position_a = 0;
	state.position_b = 0;
	state.time_a = 0;
	state.time_b = 0;
	state.new_data_flag = 0;
	state.crc = 0;
	motion_write_state_to_vregs(state);
	return 0;
}

/* Return the Calibrate flag to show the encoder can be calibrated with the hall-sensors. */
uint8_t get_calibrate(void) {
	return calibrate;
}

/* Set calibrate flag to 0 or 1 to be able to calibrate the encoder with the hall-sensors. */
void set_calibrate(uint8_t value) {
	calibrate = value;
	return;
}

/*
 * Initialize motion by setting the idle state.
 */
void motion_init(void) {
	motion_return_to_idle();
	return;
}
