/**
 * POOT
 * The Zebro Project
 * Delft University of Technology
 * 2016
 *
 * Filename: adc.c
 *
 * Description:
 * Keeps information about how late it is.
 * Performs emergency stop when we did not receive
 * a command for to long.
 * Also handles the watchdog timer.
 *
 * We use timer 16 to keep a timebase.
 *
 * Authors:
 * Piet De Vaere -- Piet@DeVae.re
 */

#include "time.h"
#include "vregs.h"
#include "stm32f0xx_hal.h"
#include "leds.h"
#include "globals.h"
#include "errors.h"

static uint8_t current_seconds = 0;
int32_t start_time;
uint8_t start_flag = 1;

/**
 * Initialise the clock timer and the watchdog
 */
int32_t time_init(void){
	time_clock_init();
	time_clock_17_init();

#ifndef LIVING_ON_THE_EDGE
	time_watchdog_init();
#endif /* LIVING_ON_THE_EDGE */

	return 0;
}

void TIM16_IRQHandler(void){
	TIM16->SR &= ~TIM_SR_UIF;

#ifndef LIVING_ON_THE_EDGE
	errors_emergency_stop();
	errors_report(ERRORS_ZEBROBUS_NO_TIMING_INFO);
#endif /* LIVING_ON_THE_EDGE */

}

int32_t time_clock_init(void){

	/* enable the clock to TIM16 */
	__HAL_RCC_TIM16_CLK_ENABLE();

	/* UEV events generated only by overflows */
	TIM16->CR1 |= TIM_CR1_URS;
	/* set the auto reload value to all ones */
	TIM16->ARR = ~0;
	/* set prescaler */
	TIM16->PSC = TIME_CLOCK_PRESCALER;
	/* start counting at 0 */
	TIM16->CNT = 0;
	/* UEV events generated only by overflows */
	TIM16->CR1 |= TIM_CR1_URS;
	/* generate update event */
	TIM16->EGR |= TIM_EGR_UG;
	/* generate interrupt on UEV event */
	TIM16->DIER |= TIM_DIER_UIE;

	/* enable the counter */
	TIM16->CR1 |= TIM_CR1_CEN;

	TIM16->SR &= ~TIM_SR_UIF;
	/* enable the ISR in the NVIC, give it a high priority */
	NVIC_EnableIRQ(TIM16_IRQn);
	NVIC_SetPriority(TIM16_IRQn, TIME_EMERGENCY_STOP_PRIORITY);

	return 0;
}

uint8_t time_clock_17_init(void){
	/* enable the clock to TIM16 */
	__HAL_RCC_TIM17_CLK_ENABLE();

	/* set the auto reload value to all ones */
	TIM17->ARR = ~0;
	/* set prescaler */
	TIM17->PSC = 0;
	/* start counting at 0 */
	TIM17->CNT = 0;
	/* UEV events generated only by overflows */
	TIM17->CR1 |= TIM_CR1_UDIS;
	/* generate update event */
	TIM17->EGR |= TIM_EGR_UG;

	/* enable the counter */
	TIM17->CR1 |= TIM_CR1_CEN;

	return 0;
}


/**
 * Reset the counter of the clock to zero
 */
int32_t time_counter_reset(void){
	TIM16->CNT = 0;

	return 0;
}


/**
 * Write the value of the counter to the vregs
 */
uint16_t time_check_time(void){
	uint16_t counter_value;

	counter_value = TIM16->CNT;
	vregs_write(VREGS_CLOCK_A, (uint8_t) (counter_value >> 8));
	vregs_write(VREGS_CLOCK_B, (uint8_t) counter_value);
	vregs_write(VREGS_SYNC_COUNTER, (uint8_t) current_seconds);

	return counter_value;
}

uint8_t get_current_seconds(void) {
	return current_seconds;
}

/**
 * Get the current time in ms
 */
uint32_t time_get_time_ms(void){
	uint32_t time;

	time = current_seconds * 1000;
	time = time + ((TIM16->CNT * 1000) / TIME_ONE_SECOND_COUNTER_VALUE);

	return time;
}

uint16_t time17_get_time(void){
	return TIM17->CNT;
}

/**
 * Set the current time, to a certain amount of seconds.
 * Fractional seconds are set to 0.
 */
uint8_t time_set_time(uint8_t seconds){
	current_seconds = seconds;
	TIM16->CNT = 0;

	return seconds;
}

/**
 * Demo thingy to make the clock count up, when no locomotive controller is
 * present.
 */
uint8_t time_dumy_locmotive_controller(void){
	if (TIM16->CNT >= TIME_ONE_SECOND_COUNTER_VALUE){
		time_counter_reset();
		current_seconds = (current_seconds + 1) % TIME_MAX_SECONDS;
	}

	return 0;
}

/**
 * Get the time time_a - time_b
 * When this difference is larger than TIME_ROLEOVER_MS / 2,
 * we assume that a rollover has occurred.
 */
int32_t time_calculate_delta(int32_t time_a, int32_t time_b){
	int32_t delta;

	delta = time_a - time_b;

	if (delta < - TIME_ROLEOVER_MS / 2) delta = delta + TIME_ROLEOVER_MS;
	if (delta > TIME_ROLEOVER_MS / 2) delta = delta - TIME_ROLEOVER_MS;

	return delta;
}

// Starts a timing measurement.
void start_timing_measurement(void){
	if (start_flag) {
		start_time = time_get_time_ms();
		start_flag = 0;
	}
}

// Returns the current timing measurement when a certain delta [ms] has past.
int8_t stop_and_return_timing_measurement(int32_t delta) {
	uint8_t flag = 0;
	if (time_calculate_delta(time_get_time_ms(), start_time) >= delta && start_flag == 0) {
	start_flag = 1;
	flag = 1;
	}
	return flag;
}

void reset_timing_measurement(void) {
	start_flag = 1;
	start_time = 0;
}

/**
 * Initialise the watchdog timer
 */
int32_t time_watchdog_init(void){
	  /* (1) Activate IWDG (not needed if done in option bytes) */
	  /* (2) Enable write access to IWDG registers */
	  /* (3) Set prescaler by 8 */
	  /* (4) Set reload value to have a rollover each 100ms */
	  /* (5) Check if flags are reset */
	  /* (6) Refresh counter */
	  IWDG->KR = TIME_IWDG_START; /* (1) */
	  IWDG->KR = TIME_IWDG_WRITE_ACCESS; /* (2) */
	  IWDG->PR = IWDG_PR_PR_1; /* (3) */
	  IWDG->RLR = TIME_IWDG_RELOAD; /* (4) */
	  while(IWDG->SR); /* (5) */
	return 0;
}

/**
 * Let the watchdog know that we are still alive and kicking
 */
int32_t time_reset_watchdog(void){
	IWDG->KR = TIME_IWDG_REFRESH;
	return 0;
}

