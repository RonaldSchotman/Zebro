/**
 * POOT
 * The Zebro Project
 * Delft University of Technology
 * 2016
 *
 * Filename: address.c
 *
 * Description:
 * Finds out where on the Zebro chassis the module was connected
 * and determines what the correct ZebroBus address is.
 *
 * Authors:
 * Piet De Vaere -- Piet@DeVae.re
 */

/*
 * Left, Right, Front and Back are defined as followed:
 *
 * 			  Front
 * 		 ---------------			^
 * 		 |M0	     M6|			|	Forward walking direction
 * 		 |		 	   |			|
 * 		 |			   |
 * 	     |M1	     M7|
 * 		 |			   |
 * 		 |	  Zebro    |
 * 		 |M2	     M8|
 * 	Left |			   | Right
 * 		 |			   |
 * 		 |M3	     M9|
 * 		 |			   |
 * 		 |			   |
 * 		 |M4	    M10|
 * 		 |			   |
 * 		 |			   |
 * 		 |M5	    M11|
 *  	 ---------------
 *  		  Back
 *
 *
 */

#include "address.h"
#include "zebrobus.h"
#include "adc.h"
#include "stdlib.h"
#include "vregs.h"

static int32_t leg_position;
static int32_t leg_side;

/**
 * Initialise the address module. Calcluates the address, and checkes
 * if the module is on the left or the right of the chassis
 */
int32_t address_init(void){
	leg_position = address_measure_position();
	if (leg_position == ADDRESS_LEFT_0
			|| leg_position == ADDRESS_LEFT_1
			|| leg_position == ADDRESS_LEFT_2
			|| leg_position == ADDRESS_LEFT_3
			|| leg_position == ADDRESS_LEFT_4
			|| leg_position == ADDRESS_LEFT_5){
		leg_side = ADDRESS_LEFT;
	}

	if (leg_position == ADDRESS_RIGHT_0
			|| leg_position == ADDRESS_RIGHT_1
			|| leg_position == ADDRESS_RIGHT_2
			|| leg_position == ADDRESS_RIGHT_3
			|| leg_position == ADDRESS_RIGHT_4
			|| leg_position == ADDRESS_RIGHT_5){
		leg_side = ADDRESS_RIGHT;
	}
	return leg_position;
}


/**
 * Returns the position of the leg module, based on the value read from
 * the ADC.
 *
 * Possible return values: ADDRESS_LEFT_FRONT, ADDRESS_LEFT_MIDDLE,
 * ADDRESS_LEFT_BACK, ADDRESS_RIGHT_FRONT, ADDRESS_RIGHT_MIDDLE,
 * ADDRESS_RIGHT_BACK
 */
int32_t address_measure_position(void){
	uint16_t adc_readout;
	int32_t cursor;
	int32_t best_index = -1;
	int32_t best_distance = INT32_MAX;

	/* list of values read from the ADC when an address resistor is read.
	 * The INT32_MAX values are placeholders. */
	int32_t adc_values[ADDRESS_NUMBER_OF_POSITIONS]
	    = {625, INT32_MAX, 1310, INT32_MAX, 1845, INT32_MAX,
	    		2458, INT32_MAX, 3143, INT32_MAX, 3724, INT32_MAX};

	/* left aligned 10 bit, so shift! */
	adc_readout = (adc_get_value(ADC_ID_RESISTOR_INDEX))>>4;

	/* find the closest element in the adc_values array */
	for(cursor = 0; cursor < ADDRESS_NUMBER_OF_POSITIONS; cursor++){
		int32_t distance;
		distance = abs(adc_values[cursor] - adc_readout);
		if (distance < best_distance){
			best_index = cursor;
			best_distance = distance;
		}
	}
	return best_index;
}

/*
 * Return the address position stored in memory. Same return values as
 * address_measure_position()
 */
int32_t address_get_position(void){
	return leg_position;
}

/*
 * Return the side of the robot the motor is on.
 *
 * Possible return values: ADDRESS_LEFT, ADDRESS_RIGHT
 */
int32_t address_get_side(void){
	return leg_side;
}

/*
 * Get the ZebroBus slave address of this module.
 */
int32_t address_get_zebrobus_address(void){
	return ADDRESS_ZEBROBUS_OFFSET + leg_position;
}

void address_write_to_vregs(void) {
	vregs_write(VREGS_LEG_ADDRESS, (uint8_t) leg_position);
	vregs_write(VREGS_LEG_SIDE, (uint8_t) leg_side);
}
